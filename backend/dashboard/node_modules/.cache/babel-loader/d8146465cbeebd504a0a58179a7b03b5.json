{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport { addField, translate, FieldTitle } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\n\nvar sanitizeRestProps = function sanitizeRestProps(_a) {\n  var setFilter = _a.setFilter,\n      setPagination = _a.setPagination,\n      setSort = _a.setSort,\n      rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n\n  return defaultSanitizeRestProps(rest);\n};\n\nvar styles = function styles(theme) {\n  return createStyles({\n    root: {},\n    label: {\n      transform: 'translate(0, 1.5px) scale(0.75)',\n      transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right')\n    },\n    checkbox: {\n      height: 32\n    }\n  });\n};\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\n\n\nvar CheckboxGroupInput =\n/** @class */\nfunction (_super) {\n  __extends(CheckboxGroupInput, _super);\n\n  function CheckboxGroupInput() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleCheck = function (event, isChecked) {\n      var _a = _this.props.input,\n          value = _a.value,\n          onChange = _a.onChange;\n      var newValue;\n\n      try {\n        // try to convert string value to number, e.g. '123'\n        newValue = JSON.parse(event.target.value);\n      } catch (e) {\n        // impossible to convert value, e.g. 'abc'\n        newValue = event.target.value;\n      }\n\n      if (isChecked) {\n        onChange((value || []).concat([newValue]));\n      } else {\n        onChange(value.filter(function (v) {\n          return v != newValue;\n        })); // eslint-disable-line eqeqeq\n      }\n    };\n\n    _this.renderCheckbox = function (choice) {\n      var _a = _this.props,\n          id = _a.id,\n          value = _a.input.value,\n          optionText = _a.optionText,\n          optionValue = _a.optionValue,\n          options = _a.options,\n          translate = _a.translate,\n          translateChoice = _a.translateChoice,\n          classes = _a.classes;\n      var choiceName = React.isValidElement(optionText) ? React.cloneElement(optionText, {\n        record: choice\n      }) : typeof optionText === 'function' ? optionText(choice) : get(choice, optionText);\n      return React.createElement(FormControlLabel, {\n        htmlFor: id + \"_\" + get(choice, optionValue),\n        key: get(choice, optionValue),\n        checked: value ? value.find(function (v) {\n          return v == get(choice, optionValue);\n        }) !== // eslint-disable-line eqeqeq\n        undefined : false,\n        onChange: _this.handleCheck,\n        value: String(get(choice, optionValue)),\n        control: React.createElement(Checkbox, __assign({\n          id: id + \"_\" + get(choice, optionValue),\n          color: \"primary\",\n          className: classes.checkbox\n        }, options)),\n        label: translateChoice ? translate(choiceName, {\n          _: choiceName\n        }) : choiceName\n      });\n    };\n\n    return _this;\n  }\n\n  CheckboxGroupInput.prototype.render = function () {\n    var _a = this.props,\n        choices = _a.choices,\n        className = _a.className,\n        _b = _a.classes,\n        classes = _b === void 0 ? {} : _b,\n        isRequired = _a.isRequired,\n        label = _a.label,\n        meta = _a.meta,\n        resource = _a.resource,\n        source = _a.source,\n        input = _a.input,\n        rest = __rest(_a, [\"choices\", \"className\", \"classes\", \"isRequired\", \"label\", \"meta\", \"resource\", \"source\", \"input\"]);\n\n    if (typeof meta === 'undefined') {\n      throw new Error(\"The CheckboxGroupInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n    }\n\n    var touched = meta.touched,\n        error = meta.error,\n        _c = meta.helperText,\n        helperText = _c === void 0 ? false : _c;\n    return React.createElement(FormControl, __assign({\n      className: className,\n      component: \"fieldset\",\n      margin: \"normal\"\n    }, sanitizeRestProps(rest)), React.createElement(FormLabel, {\n      component: \"legend\",\n      className: classes.label\n    }, React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    })), React.createElement(FormGroup, {\n      row: true\n    }, choices.map(this.renderCheckbox)), touched && error && React.createElement(FormHelperText, {\n      error: true\n    }, error), helperText && React.createElement(FormHelperText, null, helperText));\n  };\n\n  return CheckboxGroupInput;\n}(Component);\n\nexport { CheckboxGroupInput };\nCheckboxGroupInput.propTypes = {\n  choices: PropTypes.arrayOf(PropTypes.object),\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  label: PropTypes.string,\n  source: PropTypes.string,\n  options: PropTypes.object,\n  id: PropTypes.string,\n  input: PropTypes.shape({\n    onChange: PropTypes.func.isRequired\n  }),\n  isRequired: PropTypes.bool,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]).isRequired,\n  optionValue: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  translate: PropTypes.func.isRequired,\n  translateChoice: PropTypes.bool.isRequired,\n  meta: PropTypes.object\n};\nCheckboxGroupInput.defaultProps = {\n  choices: [],\n  classes: {},\n  options: {},\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar EnhancedCheckboxGroupInput = compose(addField, translate, withStyles(styles))(CheckboxGroupInput);\nEnhancedCheckboxGroupInput.defaultProps = {\n  fullWidth: true\n};\nexport default EnhancedCheckboxGroupInput;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-ui-materialui/esm/input/CheckboxGroupInput.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","Component","PropTypes","get","FormLabel","FormControl","FormGroup","FormControlLabel","FormHelperText","Checkbox","withStyles","createStyles","compose","addField","translate","FieldTitle","defaultSanitizeRestProps","sanitizeRestProps","_a","setFilter","setPagination","setSort","rest","styles","theme","root","label","transform","transformOrigin","direction","checkbox","height","CheckboxGroupInput","_super","_this","handleCheck","event","isChecked","props","input","value","onChange","newValue","JSON","parse","target","concat","filter","v","renderCheckbox","choice","id","optionText","optionValue","options","translateChoice","classes","choiceName","isValidElement","cloneElement","record","createElement","htmlFor","key","checked","find","undefined","String","control","color","className","_","render","choices","_b","isRequired","meta","resource","source","Error","touched","error","_c","helperText","component","margin","row","map","propTypes","arrayOf","object","string","shape","func","bool","oneOfType","element","defaultProps","EnhancedCheckboxGroupInput","fullWidth"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport compose from 'recompose/compose';\nimport { addField, translate, FieldTitle } from 'ra-core';\nimport defaultSanitizeRestProps from './sanitizeRestProps';\nvar sanitizeRestProps = function (_a) {\n    var setFilter = _a.setFilter, setPagination = _a.setPagination, setSort = _a.setSort, rest = __rest(_a, [\"setFilter\", \"setPagination\", \"setSort\"]);\n    return defaultSanitizeRestProps(rest);\n};\nvar styles = function (theme) {\n    return createStyles({\n        root: {},\n        label: {\n            transform: 'translate(0, 1.5px) scale(0.75)',\n            transformOrigin: \"top \" + (theme.direction === 'ltr' ? 'left' : 'right'),\n        },\n        checkbox: {\n            height: 32,\n        },\n    });\n};\n/**\n * An Input component for a checkbox group, using an array of objects for the options\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * The expected input must be an array of identifiers (e.g. [12, 31]) which correspond to\n * the 'optionValue' of 'choices' attribute objects.\n *\n * By default, the options are built from:\n *  - the 'id' property as the option value,\n *  - the 'name' property an the option text\n * @example\n * const choices = [\n *     { id: 12, name: 'Ray Hakt' },\n *     { id: 31, name: 'Ann Gullar' },\n *     { id: 42, name: 'Sean Phonee' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} />\n *\n * You can also customize the properties to use for the option name and value,\n * thanks to the 'optionText' and 'optionValue' attributes.\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi' },\n *    { _id: 456, full_name: 'Jane Austen' },\n * ];\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <span>{record.first_name} {record.last_name}</span>;\n * <CheckboxGroupInput source=\"recipients\" choices={choices} optionText={<FullNameField />}/>\n *\n * The choices are translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'programming', name: 'myroot.category.programming' },\n *    { id: 'lifestyle', name: 'myroot.category.lifestyle' },\n *    { id: 'photography', name: 'myroot.category.photography' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <CheckboxGroupInput source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * The object passed as `options` props is passed to the material-ui <Checkbox> components\n */\nvar CheckboxGroupInput = /** @class */ (function (_super) {\n    __extends(CheckboxGroupInput, _super);\n    function CheckboxGroupInput() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.handleCheck = function (event, isChecked) {\n            var _a = _this.props.input, value = _a.value, onChange = _a.onChange;\n            var newValue;\n            try {\n                // try to convert string value to number, e.g. '123'\n                newValue = JSON.parse(event.target.value);\n            }\n            catch (e) {\n                // impossible to convert value, e.g. 'abc'\n                newValue = event.target.value;\n            }\n            if (isChecked) {\n                onChange((value || []).concat([newValue]));\n            }\n            else {\n                onChange(value.filter(function (v) { return v != newValue; })); // eslint-disable-line eqeqeq\n            }\n        };\n        _this.renderCheckbox = function (choice) {\n            var _a = _this.props, id = _a.id, value = _a.input.value, optionText = _a.optionText, optionValue = _a.optionValue, options = _a.options, translate = _a.translate, translateChoice = _a.translateChoice, classes = _a.classes;\n            var choiceName = React.isValidElement(optionText)\n                ? React.cloneElement(optionText, { record: choice })\n                : typeof optionText === 'function'\n                    ? optionText(choice)\n                    : get(choice, optionText);\n            return (React.createElement(FormControlLabel, { htmlFor: id + \"_\" + get(choice, optionValue), key: get(choice, optionValue), checked: value\n                    ? value.find(function (v) { return v == get(choice, optionValue); }) !== // eslint-disable-line eqeqeq\n                        undefined\n                    : false, onChange: _this.handleCheck, value: String(get(choice, optionValue)), control: React.createElement(Checkbox, __assign({ id: id + \"_\" + get(choice, optionValue), color: \"primary\", className: classes.checkbox }, options)), label: translateChoice\n                    ? translate(choiceName, { _: choiceName })\n                    : choiceName }));\n        };\n        return _this;\n    }\n    CheckboxGroupInput.prototype.render = function () {\n        var _a = this.props, choices = _a.choices, className = _a.className, _b = _a.classes, classes = _b === void 0 ? {} : _b, isRequired = _a.isRequired, label = _a.label, meta = _a.meta, resource = _a.resource, source = _a.source, input = _a.input, rest = __rest(_a, [\"choices\", \"className\", \"classes\", \"isRequired\", \"label\", \"meta\", \"resource\", \"source\", \"input\"]);\n        if (typeof meta === 'undefined') {\n            throw new Error(\"The CheckboxGroupInput component wasn't called within a redux-form <Field>. Did you decorate it and forget to add the addField prop to your component? See https://marmelab.com/react-admin/Inputs.html#writing-your-own-input-component for details.\");\n        }\n        var touched = meta.touched, error = meta.error, _c = meta.helperText, helperText = _c === void 0 ? false : _c;\n        return (React.createElement(FormControl, __assign({ className: className, component: \"fieldset\", margin: \"normal\" }, sanitizeRestProps(rest)),\n            React.createElement(FormLabel, { component: \"legend\", className: classes.label },\n                React.createElement(FieldTitle, { label: label, source: source, resource: resource, isRequired: isRequired })),\n            React.createElement(FormGroup, { row: true }, choices.map(this.renderCheckbox)),\n            touched && error && (React.createElement(FormHelperText, { error: true }, error)),\n            helperText && React.createElement(FormHelperText, null, helperText)));\n    };\n    return CheckboxGroupInput;\n}(Component));\nexport { CheckboxGroupInput };\nCheckboxGroupInput.propTypes = {\n    choices: PropTypes.arrayOf(PropTypes.object),\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    label: PropTypes.string,\n    source: PropTypes.string,\n    options: PropTypes.object,\n    id: PropTypes.string,\n    input: PropTypes.shape({\n        onChange: PropTypes.func.isRequired,\n    }),\n    isRequired: PropTypes.bool,\n    optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]).isRequired,\n    optionValue: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    translate: PropTypes.func.isRequired,\n    translateChoice: PropTypes.bool.isRequired,\n    meta: PropTypes.object,\n};\nCheckboxGroupInput.defaultProps = {\n    choices: [],\n    classes: {},\n    options: {},\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\nvar EnhancedCheckboxGroupInput = compose(addField, translate, withStyles(styles))(CheckboxGroupInput);\nEnhancedCheckboxGroupInput.defaultProps = {\n    fullWidth: true,\n};\nexport default EnhancedCheckboxGroupInput;\n"]},"metadata":{},"sourceType":"module"}