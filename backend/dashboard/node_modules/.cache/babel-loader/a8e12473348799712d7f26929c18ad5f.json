{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport lodashMemoize from 'lodash/memoize';\n/* eslint-disable no-underscore-dangle */\n\n/* @link http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */\n\nvar EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\n\nvar isEmpty = function isEmpty(value) {\n  return typeof value === 'undefined' || value === null || value === '';\n};\n\nvar getMessage = function getMessage(message, messageArgs, value, values, props) {\n  return typeof message === 'function' ? message(__assign({\n    args: messageArgs,\n    value: value,\n    values: values\n  }, props)) : props.translate(message, __assign({\n    _: message\n  }, messageArgs));\n}; // If we define validation functions directly in JSX, it will\n// result in a new function at every render, and then trigger infinite re-render.\n// Hence, we memoize every built-in validator to prevent a \"Maximum call stack\" error.\n\n\nvar memoize = function memoize(fn) {\n  return lodashMemoize(fn, function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return JSON.stringify(args);\n  });\n};\n/**\n * Required validator\n *\n * Returns an error if the value is null, undefined, or empty\n *\n * @param {string|function} message\n *\n * @example\n *\n * const titleValidators = [required('The title is required')];\n * <TextInput name=\"title\" validate={titleValidators} />\n */\n\n\nexport var required = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.required';\n  }\n\n  return Object.assign(function (value, values, props) {\n    return isEmpty(value) ? getMessage(message, undefined, value, values, props) : undefined;\n  }, {\n    isRequired: true\n  });\n});\n/**\n * Minimum length validator\n *\n * Returns an error if the value has a length less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const passwordValidators = [minLength(10, 'Should be at least 10 characters')];\n * <TextInput type=\"password\" name=\"password\" validate={passwordValidators} />\n */\n\nexport var minLength = memoize(function (min, message) {\n  if (message === void 0) {\n    message = 'ra.validation.minLength';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && value.length < min ? getMessage(message, {\n      min: min\n    }, value, values, props) : undefined;\n  };\n});\n/**\n * Maximum length validator\n *\n * Returns an error if the value has a length higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const nameValidators = [maxLength(10, 'Should be at most 10 characters')];\n * <TextInput name=\"name\" validate={nameValidators} />\n */\n\nexport var maxLength = memoize(function (max, message) {\n  if (message === void 0) {\n    message = 'ra.validation.maxLength';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && value.length > max ? getMessage(message, {\n      max: max\n    }, value, values, props) : undefined;\n  };\n});\n/**\n * Minimum validator\n *\n * Returns an error if the value is less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [minValue(5, 'Should be more than 5')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\n\nexport var minValue = memoize(function (min, message) {\n  if (message === void 0) {\n    message = 'ra.validation.minValue';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && value < min ? getMessage(message, {\n      min: min\n    }, value, values, props) : undefined;\n  };\n});\n/**\n * Maximum validator\n *\n * Returns an error if the value is higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [maxValue(10, 'Should be less than 10')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\n\nexport var maxValue = memoize(function (max, message) {\n  if (message === void 0) {\n    message = 'ra.validation.maxValue';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && value > max ? getMessage(message, {\n      max: max\n    }, value, values, props) : undefined;\n  };\n});\n/**\n * Number validator\n *\n * Returns an error if the value is not a number\n *\n * @param {string|function} message\n *\n * @example\n *\n * const ageValidators = [number('Must be a number')];\n * <TextInput name=\"age\" validate={ageValidators} />\n */\n\nexport var number = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.number';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && isNaN(Number(value)) ? getMessage(message, undefined, value, values, props) : undefined;\n  };\n});\n/**\n * Regular expression validator\n *\n * Returns an error if the value does not match the pattern given as parameter\n *\n * @param {RegExp} pattern\n * @param {string|function} message\n *\n * @example\n *\n * const zipValidators = [regex(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Must be a zip code')];\n * <TextInput name=\"zip\" validate={zipValidators} />\n */\n\nexport var regex = lodashMemoize(function (pattern, message) {\n  if (message === void 0) {\n    message = 'ra.validation.regex';\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && typeof value === 'string' && !pattern.test(value) ? getMessage(message, {\n      pattern: pattern\n    }, value, values, props) : undefined;\n  };\n}, function (pattern, message) {\n  return pattern.toString() + message;\n});\n/**\n * Email validator\n *\n * Returns an error if the value is not a valid email\n *\n * @param {string|function} message\n *\n * @example\n *\n * const emailValidators = [email('Must be an email')];\n * <TextInput name=\"email\" validate={emailValidators} />\n */\n\nexport var email = memoize(function (message) {\n  if (message === void 0) {\n    message = 'ra.validation.email';\n  }\n\n  return regex(EMAIL_REGEX, message);\n});\n\nvar oneOfTypeMessage = function oneOfTypeMessage(_a) {\n  var list = _a.list,\n      value = _a.value,\n      values = _a.values,\n      translate = _a.translate;\n  return translate('ra.validation.oneOf', {\n    options: list.join(', ')\n  });\n};\n/**\n * Choices validator\n *\n * Returns an error if the value is not among the list passed as parameter\n *\n * @param {array} list\n * @param {string|function} message\n *\n * @example\n *\n * const genderValidators = [choices(['male', 'female'], 'Must be either Male or Female')];\n * <TextInput name=\"gender\" validate={genderValidators} />\n */\n\n\nexport var choices = memoize(function (list, message) {\n  if (message === void 0) {\n    message = oneOfTypeMessage;\n  }\n\n  return function (value, values, props) {\n    return !isEmpty(value) && list.indexOf(value) === -1 ? getMessage(message, {\n      list: list\n    }, value, values, props) : undefined;\n  };\n});","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-core/esm/form/validate.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","lodashMemoize","EMAIL_REGEX","isEmpty","value","getMessage","message","messageArgs","values","props","args","translate","_","memoize","fn","_i","JSON","stringify","required","undefined","isRequired","minLength","min","maxLength","max","minValue","maxValue","number","isNaN","Number","regex","pattern","test","toString","email","oneOfTypeMessage","_a","list","options","join","choices","indexOf"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport lodashMemoize from 'lodash/memoize';\n/* eslint-disable no-underscore-dangle */\n/* @link http://stackoverflow.com/questions/46155/validate-email-address-in-javascript */\nvar EMAIL_REGEX = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/; // eslint-disable-line no-useless-escape\nvar isEmpty = function (value) {\n    return typeof value === 'undefined' || value === null || value === '';\n};\nvar getMessage = function (message, messageArgs, value, values, props) {\n    return typeof message === 'function'\n        ? message(__assign({ args: messageArgs, value: value,\n            values: values }, props))\n        : props.translate(message, __assign({ _: message }, messageArgs));\n};\n// If we define validation functions directly in JSX, it will\n// result in a new function at every render, and then trigger infinite re-render.\n// Hence, we memoize every built-in validator to prevent a \"Maximum call stack\" error.\nvar memoize = function (fn) {\n    return lodashMemoize(fn, function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return JSON.stringify(args);\n    });\n};\n/**\n * Required validator\n *\n * Returns an error if the value is null, undefined, or empty\n *\n * @param {string|function} message\n *\n * @example\n *\n * const titleValidators = [required('The title is required')];\n * <TextInput name=\"title\" validate={titleValidators} />\n */\nexport var required = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.required'; }\n    return Object.assign(function (value, values, props) {\n        return isEmpty(value)\n            ? getMessage(message, undefined, value, values, props)\n            : undefined;\n    }, { isRequired: true });\n});\n/**\n * Minimum length validator\n *\n * Returns an error if the value has a length less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const passwordValidators = [minLength(10, 'Should be at least 10 characters')];\n * <TextInput type=\"password\" name=\"password\" validate={passwordValidators} />\n */\nexport var minLength = memoize(function (min, message) {\n    if (message === void 0) { message = 'ra.validation.minLength'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && value.length < min\n            ? getMessage(message, { min: min }, value, values, props)\n            : undefined;\n    };\n});\n/**\n * Maximum length validator\n *\n * Returns an error if the value has a length higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const nameValidators = [maxLength(10, 'Should be at most 10 characters')];\n * <TextInput name=\"name\" validate={nameValidators} />\n */\nexport var maxLength = memoize(function (max, message) {\n    if (message === void 0) { message = 'ra.validation.maxLength'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && value.length > max\n            ? getMessage(message, { max: max }, value, values, props)\n            : undefined;\n    };\n});\n/**\n * Minimum validator\n *\n * Returns an error if the value is less than the parameter\n *\n * @param {integer} min\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [minValue(5, 'Should be more than 5')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\nexport var minValue = memoize(function (min, message) {\n    if (message === void 0) { message = 'ra.validation.minValue'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && value < min\n            ? getMessage(message, { min: min }, value, values, props)\n            : undefined;\n    };\n});\n/**\n * Maximum validator\n *\n * Returns an error if the value is higher than the parameter\n *\n * @param {integer} max\n * @param {string|function} message\n *\n * @example\n *\n * const fooValidators = [maxValue(10, 'Should be less than 10')];\n * <NumberInput name=\"foo\" validate={fooValidators} />\n */\nexport var maxValue = memoize(function (max, message) {\n    if (message === void 0) { message = 'ra.validation.maxValue'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && value > max\n            ? getMessage(message, { max: max }, value, values, props)\n            : undefined;\n    };\n});\n/**\n * Number validator\n *\n * Returns an error if the value is not a number\n *\n * @param {string|function} message\n *\n * @example\n *\n * const ageValidators = [number('Must be a number')];\n * <TextInput name=\"age\" validate={ageValidators} />\n */\nexport var number = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.number'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && isNaN(Number(value))\n            ? getMessage(message, undefined, value, values, props)\n            : undefined;\n    };\n});\n/**\n * Regular expression validator\n *\n * Returns an error if the value does not match the pattern given as parameter\n *\n * @param {RegExp} pattern\n * @param {string|function} message\n *\n * @example\n *\n * const zipValidators = [regex(/^\\d{5}(?:[-\\s]\\d{4})?$/, 'Must be a zip code')];\n * <TextInput name=\"zip\" validate={zipValidators} />\n */\nexport var regex = lodashMemoize(function (pattern, message) {\n    if (message === void 0) { message = 'ra.validation.regex'; }\n    return function (value, values, props) {\n        return !isEmpty(value) && typeof value === 'string' && !pattern.test(value)\n            ? getMessage(message, { pattern: pattern }, value, values, props)\n            : undefined;\n    };\n}, function (pattern, message) {\n    return pattern.toString() + message;\n});\n/**\n * Email validator\n *\n * Returns an error if the value is not a valid email\n *\n * @param {string|function} message\n *\n * @example\n *\n * const emailValidators = [email('Must be an email')];\n * <TextInput name=\"email\" validate={emailValidators} />\n */\nexport var email = memoize(function (message) {\n    if (message === void 0) { message = 'ra.validation.email'; }\n    return regex(EMAIL_REGEX, message);\n});\nvar oneOfTypeMessage = function (_a) {\n    var list = _a.list, value = _a.value, values = _a.values, translate = _a.translate;\n    return translate('ra.validation.oneOf', {\n        options: list.join(', '),\n    });\n};\n/**\n * Choices validator\n *\n * Returns an error if the value is not among the list passed as parameter\n *\n * @param {array} list\n * @param {string|function} message\n *\n * @example\n *\n * const genderValidators = [choices(['male', 'female'], 'Must be either Male or Female')];\n * <TextInput name=\"gender\" validate={genderValidators} />\n */\nexport var choices = memoize(function (list, message) {\n    if (message === void 0) { message = oneOfTypeMessage; }\n    return function (value, values, props) {\n        return !isEmpty(value) && list.indexOf(value) === -1\n            ? getMessage(message, { list: list }, value, values, props)\n            : undefined;\n    };\n});\n"]},"metadata":{},"sourceType":"module"}