{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFocusVisible = detectFocusVisible;\nexports.listenForFocusKeys = listenForFocusKeys;\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"../utils/ownerDocument\"));\n\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = (0, _ownerDocument.default)(element);\n\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n}\n\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\n\nfunction isFocusKey(event) {\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 1e3);\n  }\n};\n\nfunction listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/@material-ui/core/ButtonBase/focusVisible.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","detectFocusVisible","listenForFocusKeys","_keycode","_warning","_ownerDocument","internal","focusKeyPressed","keyUpEventTimeout","instance","element","callback","attempt","arguments","length","undefined","process","env","NODE_ENV","default","focusVisibleCheckTime","focusVisibleMaxCheckTimes","focusVisibleTimeout","setTimeout","doc","activeElement","contains","FOCUS_KEYS","isFocusKey","event","indexOf","handleKeyUpEvent","clearTimeout","win","addEventListener"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.detectFocusVisible = detectFocusVisible;\nexports.listenForFocusKeys = listenForFocusKeys;\n\nvar _keycode = _interopRequireDefault(require(\"keycode\"));\n\nvar _warning = _interopRequireDefault(require(\"warning\"));\n\nvar _ownerDocument = _interopRequireDefault(require(\"../utils/ownerDocument\"));\n\nvar internal = {\n  focusKeyPressed: false,\n  keyUpEventTimeout: -1\n};\n\nfunction detectFocusVisible(instance, element, callback) {\n  var attempt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleCheckTime, 'Material-UI: missing instance.focusVisibleCheckTime.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? (0, _warning.default)(instance.focusVisibleMaxCheckTimes, 'Material-UI: missing instance.focusVisibleMaxCheckTimes.') : void 0;\n  instance.focusVisibleTimeout = setTimeout(function () {\n    var doc = (0, _ownerDocument.default)(element);\n\n    if (internal.focusKeyPressed && (doc.activeElement === element || element.contains(doc.activeElement))) {\n      callback();\n    } else if (attempt < instance.focusVisibleMaxCheckTimes) {\n      detectFocusVisible(instance, element, callback, attempt + 1);\n    }\n  }, instance.focusVisibleCheckTime);\n}\n\nvar FOCUS_KEYS = ['tab', 'enter', 'space', 'esc', 'up', 'down', 'left', 'right'];\n\nfunction isFocusKey(event) {\n  return FOCUS_KEYS.indexOf((0, _keycode.default)(event)) > -1;\n}\n\nvar handleKeyUpEvent = function handleKeyUpEvent(event) {\n  if (isFocusKey(event)) {\n    internal.focusKeyPressed = true; // Let's consider that the user is using a keyboard during a window frame of 1s.\n\n    clearTimeout(internal.keyUpEventTimeout);\n    internal.keyUpEventTimeout = setTimeout(function () {\n      internal.focusKeyPressed = false;\n    }, 1e3);\n  }\n};\n\nfunction listenForFocusKeys(win) {\n  // The event listener will only be added once per window.\n  // Duplicate event listeners will be ignored by addEventListener.\n  // Also, this logic is client side only, we don't need a teardown.\n  win.addEventListener('keyup', handleKeyUpEvent);\n}"]},"metadata":{},"sourceType":"script"}