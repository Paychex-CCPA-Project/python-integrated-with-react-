{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport isPromise from 'is-promise';\nimport SubmissionError from './SubmissionError';\n\nvar handleSubmit = function handleSubmit(submit, props, valid, asyncValidate, fields) {\n  var dispatch = props.dispatch,\n      onSubmitFail = props.onSubmitFail,\n      onSubmitSuccess = props.onSubmitSuccess,\n      startSubmit = props.startSubmit,\n      stopSubmit = props.stopSubmit,\n      setSubmitFailed = props.setSubmitFailed,\n      setSubmitSucceeded = props.setSubmitSucceeded,\n      syncErrors = props.syncErrors,\n      asyncErrors = props.asyncErrors,\n      touch = props.touch,\n      values = props.values,\n      persistentSubmitErrors = props.persistentSubmitErrors;\n  touch.apply(undefined, _toConsumableArray(fields)); // mark all fields as touched\n\n  if (valid || persistentSubmitErrors) {\n    var doSubmit = function doSubmit() {\n      var result = void 0;\n\n      try {\n        result = submit(values, dispatch, props);\n      } catch (submitError) {\n        var error = submitError instanceof SubmissionError ? submitError.errors : undefined;\n        stopSubmit(error);\n        setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n\n        if (onSubmitFail) {\n          onSubmitFail(error, dispatch, submitError, props);\n        }\n\n        if (error || onSubmitFail) {\n          // if you've provided an onSubmitFail callback, don't re-throw the error\n          return error;\n        } else {\n          throw submitError;\n        }\n      }\n\n      if (isPromise(result)) {\n        startSubmit();\n        return result.then(function (submitResult) {\n          stopSubmit();\n          setSubmitSucceeded();\n\n          if (onSubmitSuccess) {\n            onSubmitSuccess(submitResult, dispatch, props);\n          }\n\n          return submitResult;\n        }, function (submitError) {\n          var error = submitError instanceof SubmissionError ? submitError.errors : undefined;\n          stopSubmit(error);\n          setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n\n          if (onSubmitFail) {\n            onSubmitFail(error, dispatch, submitError, props);\n          }\n\n          if (error || onSubmitFail) {\n            // if you've provided an onSubmitFail callback, don't re-throw the error\n            return error;\n          } else {\n            throw submitError;\n          }\n        });\n      } else {\n        setSubmitSucceeded();\n\n        if (onSubmitSuccess) {\n          onSubmitSuccess(result, dispatch, props);\n        }\n      }\n\n      return result;\n    };\n\n    var asyncValidateResult = asyncValidate && asyncValidate();\n\n    if (asyncValidateResult) {\n      return asyncValidateResult.then(function (asyncErrors) {\n        if (asyncErrors) {\n          throw asyncErrors;\n        }\n\n        return doSubmit();\n      }).catch(function (asyncErrors) {\n        setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n\n        if (onSubmitFail) {\n          onSubmitFail(asyncErrors, dispatch, null, props);\n        }\n\n        return Promise.reject(asyncErrors);\n      });\n    } else {\n      return doSubmit();\n    }\n  } else {\n    setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n\n    var errors = _extends({}, asyncErrors, syncErrors);\n\n    if (onSubmitFail) {\n      onSubmitFail(errors, dispatch, null, props);\n    }\n\n    return errors;\n  }\n};\n\nexport default handleSubmit;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/redux-form/es/handleSubmit.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_toConsumableArray","arr","Array","isArray","arr2","from","isPromise","SubmissionError","handleSubmit","submit","props","valid","asyncValidate","fields","dispatch","onSubmitFail","onSubmitSuccess","startSubmit","stopSubmit","setSubmitFailed","setSubmitSucceeded","syncErrors","asyncErrors","touch","values","persistentSubmitErrors","apply","undefined","doSubmit","result","submitError","error","errors","then","submitResult","asyncValidateResult","catch","Promise","reject"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIN,MAAM,CAACQ,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,SAASS,kBAAT,CAA4BC,GAA5B,EAAiC;AAAE,MAAIC,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAJ,EAAwB;AAAE,SAAK,IAAIT,CAAC,GAAG,CAAR,EAAWY,IAAI,GAAGF,KAAK,CAACD,GAAG,CAACP,MAAL,CAA5B,EAA0CF,CAAC,GAAGS,GAAG,CAACP,MAAlD,EAA0DF,CAAC,EAA3D,EAA+D;AAAEY,MAAAA,IAAI,CAACZ,CAAD,CAAJ,GAAUS,GAAG,CAACT,CAAD,CAAb;AAAmB;;AAAC,WAAOY,IAAP;AAAc,GAA7H,MAAmI;AAAE,WAAOF,KAAK,CAACG,IAAN,CAAWJ,GAAX,CAAP;AAAyB;AAAE;;AAEnM,OAAOK,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAGA,IAAIC,YAAY,GAAG,SAASA,YAAT,CAAsBC,MAAtB,EAA8BC,KAA9B,EAAqCC,KAArC,EAA4CC,aAA5C,EAA2DC,MAA3D,EAAmE;AACpF,MAAIC,QAAQ,GAAGJ,KAAK,CAACI,QAArB;AAAA,MACIC,YAAY,GAAGL,KAAK,CAACK,YADzB;AAAA,MAEIC,eAAe,GAAGN,KAAK,CAACM,eAF5B;AAAA,MAGIC,WAAW,GAAGP,KAAK,CAACO,WAHxB;AAAA,MAIIC,UAAU,GAAGR,KAAK,CAACQ,UAJvB;AAAA,MAKIC,eAAe,GAAGT,KAAK,CAACS,eAL5B;AAAA,MAMIC,kBAAkB,GAAGV,KAAK,CAACU,kBAN/B;AAAA,MAOIC,UAAU,GAAGX,KAAK,CAACW,UAPvB;AAAA,MAQIC,WAAW,GAAGZ,KAAK,CAACY,WARxB;AAAA,MASIC,KAAK,GAAGb,KAAK,CAACa,KATlB;AAAA,MAUIC,MAAM,GAAGd,KAAK,CAACc,MAVnB;AAAA,MAWIC,sBAAsB,GAAGf,KAAK,CAACe,sBAXnC;AAcAF,EAAAA,KAAK,CAACG,KAAN,CAAYC,SAAZ,EAAuB3B,kBAAkB,CAACa,MAAD,CAAzC,EAfoF,CAehC;;AAEpD,MAAIF,KAAK,IAAIc,sBAAb,EAAqC;AACnC,QAAIG,QAAQ,GAAG,SAASA,QAAT,GAAoB;AACjC,UAAIC,MAAM,GAAG,KAAK,CAAlB;;AACA,UAAI;AACFA,QAAAA,MAAM,GAAGpB,MAAM,CAACe,MAAD,EAASV,QAAT,EAAmBJ,KAAnB,CAAf;AACD,OAFD,CAEE,OAAOoB,WAAP,EAAoB;AACpB,YAAIC,KAAK,GAAGD,WAAW,YAAYvB,eAAvB,GAAyCuB,WAAW,CAACE,MAArD,GAA8DL,SAA1E;AACAT,QAAAA,UAAU,CAACa,KAAD,CAAV;AACAZ,QAAAA,eAAe,CAACO,KAAhB,CAAsBC,SAAtB,EAAiC3B,kBAAkB,CAACa,MAAD,CAAnD;;AACA,YAAIE,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACgB,KAAD,EAAQjB,QAAR,EAAkBgB,WAAlB,EAA+BpB,KAA/B,CAAZ;AACD;;AACD,YAAIqB,KAAK,IAAIhB,YAAb,EAA2B;AACzB;AACA,iBAAOgB,KAAP;AACD,SAHD,MAGO;AACL,gBAAMD,WAAN;AACD;AACF;;AACD,UAAIxB,SAAS,CAACuB,MAAD,CAAb,EAAuB;AACrBZ,QAAAA,WAAW;AACX,eAAOY,MAAM,CAACI,IAAP,CAAY,UAAUC,YAAV,EAAwB;AACzChB,UAAAA,UAAU;AACVE,UAAAA,kBAAkB;;AAClB,cAAIJ,eAAJ,EAAqB;AACnBA,YAAAA,eAAe,CAACkB,YAAD,EAAepB,QAAf,EAAyBJ,KAAzB,CAAf;AACD;;AACD,iBAAOwB,YAAP;AACD,SAPM,EAOJ,UAAUJ,WAAV,EAAuB;AACxB,cAAIC,KAAK,GAAGD,WAAW,YAAYvB,eAAvB,GAAyCuB,WAAW,CAACE,MAArD,GAA8DL,SAA1E;AACAT,UAAAA,UAAU,CAACa,KAAD,CAAV;AACAZ,UAAAA,eAAe,CAACO,KAAhB,CAAsBC,SAAtB,EAAiC3B,kBAAkB,CAACa,MAAD,CAAnD;;AACA,cAAIE,YAAJ,EAAkB;AAChBA,YAAAA,YAAY,CAACgB,KAAD,EAAQjB,QAAR,EAAkBgB,WAAlB,EAA+BpB,KAA/B,CAAZ;AACD;;AACD,cAAIqB,KAAK,IAAIhB,YAAb,EAA2B;AACzB;AACA,mBAAOgB,KAAP;AACD,WAHD,MAGO;AACL,kBAAMD,WAAN;AACD;AACF,SApBM,CAAP;AAqBD,OAvBD,MAuBO;AACLV,QAAAA,kBAAkB;;AAClB,YAAIJ,eAAJ,EAAqB;AACnBA,UAAAA,eAAe,CAACa,MAAD,EAASf,QAAT,EAAmBJ,KAAnB,CAAf;AACD;AACF;;AACD,aAAOmB,MAAP;AACD,KAhDD;;AAkDA,QAAIM,mBAAmB,GAAGvB,aAAa,IAAIA,aAAa,EAAxD;;AACA,QAAIuB,mBAAJ,EAAyB;AACvB,aAAOA,mBAAmB,CAACF,IAApB,CAAyB,UAAUX,WAAV,EAAuB;AACrD,YAAIA,WAAJ,EAAiB;AACf,gBAAMA,WAAN;AACD;;AACD,eAAOM,QAAQ,EAAf;AACD,OALM,EAKJQ,KALI,CAKE,UAAUd,WAAV,EAAuB;AAC9BH,QAAAA,eAAe,CAACO,KAAhB,CAAsBC,SAAtB,EAAiC3B,kBAAkB,CAACa,MAAD,CAAnD;;AACA,YAAIE,YAAJ,EAAkB;AAChBA,UAAAA,YAAY,CAACO,WAAD,EAAcR,QAAd,EAAwB,IAAxB,EAA8BJ,KAA9B,CAAZ;AACD;;AACD,eAAO2B,OAAO,CAACC,MAAR,CAAehB,WAAf,CAAP;AACD,OAXM,CAAP;AAYD,KAbD,MAaO;AACL,aAAOM,QAAQ,EAAf;AACD;AACF,GApED,MAoEO;AACLT,IAAAA,eAAe,CAACO,KAAhB,CAAsBC,SAAtB,EAAiC3B,kBAAkB,CAACa,MAAD,CAAnD;;AACA,QAAImB,MAAM,GAAG5C,QAAQ,CAAC,EAAD,EAAKkC,WAAL,EAAkBD,UAAlB,CAArB;;AACA,QAAIN,YAAJ,EAAkB;AAChBA,MAAAA,YAAY,CAACiB,MAAD,EAASlB,QAAT,EAAmB,IAAnB,EAAyBJ,KAAzB,CAAZ;AACD;;AACD,WAAOsB,MAAP;AACD;AACF,CA7FD;;AA+FA,eAAexB,YAAf","sourcesContent":["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport isPromise from 'is-promise';\nimport SubmissionError from './SubmissionError';\n\n\nvar handleSubmit = function handleSubmit(submit, props, valid, asyncValidate, fields) {\n  var dispatch = props.dispatch,\n      onSubmitFail = props.onSubmitFail,\n      onSubmitSuccess = props.onSubmitSuccess,\n      startSubmit = props.startSubmit,\n      stopSubmit = props.stopSubmit,\n      setSubmitFailed = props.setSubmitFailed,\n      setSubmitSucceeded = props.setSubmitSucceeded,\n      syncErrors = props.syncErrors,\n      asyncErrors = props.asyncErrors,\n      touch = props.touch,\n      values = props.values,\n      persistentSubmitErrors = props.persistentSubmitErrors;\n\n\n  touch.apply(undefined, _toConsumableArray(fields)); // mark all fields as touched\n\n  if (valid || persistentSubmitErrors) {\n    var doSubmit = function doSubmit() {\n      var result = void 0;\n      try {\n        result = submit(values, dispatch, props);\n      } catch (submitError) {\n        var error = submitError instanceof SubmissionError ? submitError.errors : undefined;\n        stopSubmit(error);\n        setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n        if (onSubmitFail) {\n          onSubmitFail(error, dispatch, submitError, props);\n        }\n        if (error || onSubmitFail) {\n          // if you've provided an onSubmitFail callback, don't re-throw the error\n          return error;\n        } else {\n          throw submitError;\n        }\n      }\n      if (isPromise(result)) {\n        startSubmit();\n        return result.then(function (submitResult) {\n          stopSubmit();\n          setSubmitSucceeded();\n          if (onSubmitSuccess) {\n            onSubmitSuccess(submitResult, dispatch, props);\n          }\n          return submitResult;\n        }, function (submitError) {\n          var error = submitError instanceof SubmissionError ? submitError.errors : undefined;\n          stopSubmit(error);\n          setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n          if (onSubmitFail) {\n            onSubmitFail(error, dispatch, submitError, props);\n          }\n          if (error || onSubmitFail) {\n            // if you've provided an onSubmitFail callback, don't re-throw the error\n            return error;\n          } else {\n            throw submitError;\n          }\n        });\n      } else {\n        setSubmitSucceeded();\n        if (onSubmitSuccess) {\n          onSubmitSuccess(result, dispatch, props);\n        }\n      }\n      return result;\n    };\n\n    var asyncValidateResult = asyncValidate && asyncValidate();\n    if (asyncValidateResult) {\n      return asyncValidateResult.then(function (asyncErrors) {\n        if (asyncErrors) {\n          throw asyncErrors;\n        }\n        return doSubmit();\n      }).catch(function (asyncErrors) {\n        setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n        if (onSubmitFail) {\n          onSubmitFail(asyncErrors, dispatch, null, props);\n        }\n        return Promise.reject(asyncErrors);\n      });\n    } else {\n      return doSubmit();\n    }\n  } else {\n    setSubmitFailed.apply(undefined, _toConsumableArray(fields));\n    var errors = _extends({}, asyncErrors, syncErrors);\n    if (onSubmitFail) {\n      onSubmitFail(errors, dispatch, null, props);\n    }\n    return errors;\n  }\n};\n\nexport default handleSubmit;"]},"metadata":{},"sourceType":"module"}