{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport compose from 'recompose/compose';\nimport { withTranslate } from 'ra-core';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property an the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\n\nexport var SelectField = function SelectField(_a) {\n  var className = _a.className,\n      source = _a.source,\n      record = _a.record,\n      choices = _a.choices,\n      optionValue = _a.optionValue,\n      optionText = _a.optionText,\n      translate = _a.translate,\n      translateChoice = _a.translateChoice,\n      rest = __rest(_a, [\"className\", \"source\", \"record\", \"choices\", \"optionValue\", \"optionText\", \"translate\", \"translateChoice\"]);\n\n  var value = get(record, source);\n  var choice = choices.find(function (c) {\n    return c[optionValue] === value;\n  });\n\n  if (!choice) {\n    return null;\n  }\n\n  var choiceName = React.isValidElement(optionText) // eslint-disable-line no-nested-ternary\n  ? React.cloneElement(optionText, {\n    record: choice\n  }) : typeof optionText === 'function' ? optionText(choice) : choice[optionText];\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body1\",\n    className: className\n  }, sanitizeRestProps(rest)), translateChoice ? translate(choiceName, {\n    _: choiceName\n  }) : choiceName);\n};\nSelectField.defaultProps = {\n  optionText: 'name',\n  optionValue: 'id',\n  translateChoice: true\n};\nvar enhance = compose(pure, withTranslate);\nvar EnhancedSelectField = enhance(SelectField);\nEnhancedSelectField.defaultProps = {\n  addLabel: true\n};\nEnhancedSelectField.propTypes = __assign({}, Typography.propTypes, fieldPropTypes, {\n  choices: PropTypes.arrayOf(PropTypes.object).isRequired,\n  optionText: PropTypes.oneOfType([PropTypes.string, PropTypes.func, PropTypes.element]),\n  optionValue: PropTypes.string,\n  translateChoice: PropTypes.bool\n});\nEnhancedSelectField.displayName = 'EnhancedSelectField';\nexport default EnhancedSelectField;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-ui-materialui/esm/field/SelectField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","PropTypes","get","pure","compose","withTranslate","Typography","sanitizeRestProps","fieldPropTypes","SelectField","_a","className","source","record","choices","optionValue","optionText","translate","translateChoice","rest","value","choice","find","c","choiceName","isValidElement","cloneElement","createElement","component","variant","_","defaultProps","enhance","EnhancedSelectField","addLabel","propTypes","arrayOf","object","isRequired","oneOfType","string","func","element","bool","displayName"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport compose from 'recompose/compose';\nimport { withTranslate } from 'ra-core';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\n/**\n * Display a value in an enumeration\n *\n * Pass possible options as an array of objects in the 'choices' attribute.\n *\n * @example\n * const choices = [\n *    { id: 'M', name: 'Male' },\n *    { id: 'F', name: 'Female' },\n * ];\n * <SelectField source=\"gender\" choices={choices} />\n *\n * By default, the text is built by\n * - finding a choice where the 'id' property equals the field value\n * - using the 'name' property an the option text\n *\n * You can also customize the properties to use for the value and text,\n * thanks to the 'optionValue' and 'optionText' attributes.\n *\n * @example\n * const choices = [\n *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },\n *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },\n * ];\n * <SelectField source=\"author_id\" choices={choices} optionText=\"full_name\" optionValue=\"_id\" />\n *\n * `optionText` also accepts a function, so you can shape the option text at will:\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;\n * <SelectField source=\"author_id\" choices={choices} optionText={optionRenderer} />\n *\n * `optionText` also accepts a React Element, that will be cloned and receive\n * the related choice as the `record` prop. You can use Field components there.\n * @example\n * const choices = [\n *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },\n *    { id: 456, first_name: 'Jane', last_name: 'Austen' },\n * ];\n * const FullNameField = ({ record }) => <Chip>{record.first_name} {record.last_name}</Chip>;\n * <SelectField source=\"gender\" choices={choices} optionText={<FullNameField />}/>\n *\n * The current choice is translated by default, so you can use translation identifiers as choices:\n * @example\n * const choices = [\n *    { id: 'M', name: 'myroot.gender.male' },\n *    { id: 'F', name: 'myroot.gender.female' },\n * ];\n *\n * However, in some cases (e.g. inside a `<ReferenceField>`), you may not want\n * the choice to be translated. In that case, set the `translateChoice` prop to false.\n * @example\n * <SelectField source=\"gender\" choices={choices} translateChoice={false}/>\n *\n * **Tip**: <ReferenceField> sets `translateChoice` to false by default.\n */\nexport var SelectField = function (_a) {\n    var className = _a.className, source = _a.source, record = _a.record, choices = _a.choices, optionValue = _a.optionValue, optionText = _a.optionText, translate = _a.translate, translateChoice = _a.translateChoice, rest = __rest(_a, [\"className\", \"source\", \"record\", \"choices\", \"optionValue\", \"optionText\", \"translate\", \"translateChoice\"]);\n    var value = get(record, source);\n    var choice = choices.find(function (c) { return c[optionValue] === value; });\n    if (!choice) {\n        return null;\n    }\n    var choiceName = React.isValidElement(optionText) // eslint-disable-line no-nested-ternary\n        ? React.cloneElement(optionText, { record: choice })\n        : typeof optionText === 'function'\n            ? optionText(choice)\n            : choice[optionText];\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body1\", className: className }, sanitizeRestProps(rest)), translateChoice\n        ? translate(choiceName, { _: choiceName })\n        : choiceName));\n};\nSelectField.defaultProps = {\n    optionText: 'name',\n    optionValue: 'id',\n    translateChoice: true,\n};\nvar enhance = compose(pure, withTranslate);\nvar EnhancedSelectField = enhance(SelectField);\nEnhancedSelectField.defaultProps = {\n    addLabel: true,\n};\nEnhancedSelectField.propTypes = __assign({}, Typography.propTypes, fieldPropTypes, { choices: PropTypes.arrayOf(PropTypes.object).isRequired, optionText: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.func,\n        PropTypes.element,\n    ]), optionValue: PropTypes.string, translateChoice: PropTypes.bool });\nEnhancedSelectField.displayName = 'EnhancedSelectField';\nexport default EnhancedSelectField;\n"]},"metadata":{},"sourceType":"module"}