{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getFormValues, FormName } from 'redux-form';\nimport get from 'lodash/get';\nimport warning from '../util/warning';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\n\nexport var FormDataConsumerView = function FormDataConsumerView(_a) {\n  var children = _a.children,\n      form = _a.form,\n      formData = _a.formData,\n      source = _a.source,\n      index = _a.index,\n      rest = __rest(_a, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n\n  var scopedFormData = formData;\n  var getSource;\n  var getSourceHasBeenCalled = false;\n  var ret; // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n\n  if (typeof index !== 'undefined') {\n    scopedFormData = get(formData, source);\n\n    getSource = function getSource(scopedSource) {\n      getSourceHasBeenCalled = true;\n      return source + \".\" + scopedSource;\n    };\n\n    ret = children(__assign({\n      formData: formData,\n      scopedFormData: scopedFormData,\n      getSource: getSource\n    }, rest));\n  } else {\n    ret = children(__assign({\n      formData: formData\n    }, rest));\n  }\n\n  warning(typeof index !== 'undefined' && ret && !getSourceHasBeenCalled, \"You're using a FormDataConsumer inside an ArrayInput and you did not called the getSource function supplied by the FormDataConsumer component. This is required for your inputs to get the proper source.\\n\\n<ArrayInput source=\\\"users\\\">\\n    <SimpleFormIterator>\\n        <TextInput source=\\\"name\\\" />\\n\\n        <FormDataConsumer>\\n            {({\\n                formData, // The whole form data\\n                scopedFormData, // The data for this item of the ArrayInput\\n                getSource, // A function to get the valid source inside an ArrayInput\\n                ...rest,\\n            }) =>\\n                scopedFormData.name ? (\\n                    <SelectInput\\n                        source={getSource('role')} // Will translate to \\\"users[0].role\\\"\\n                        choices={['admin', 'user']}\\n                        {...rest}\\n                    />\\n                ) : null\\n            }\\n        </FormDataConsumer>\\n    </SimpleFormIterator>\\n</ArrayInput>\");\n  return ret === undefined ? null : ret;\n};\n\nvar mapStateToProps = function mapStateToProps(state, _a) {\n  var form = _a.form,\n      record = _a.record;\n  return {\n    formData: getFormValues(form)(state) || record\n  };\n};\n\nvar ConnectedFormDataConsumerView = connect(mapStateToProps)(FormDataConsumerView);\n\nvar FormDataConsumer = function FormDataConsumer(props) {\n  return React.createElement(FormName, null, function (_a) {\n    var form = _a.form;\n    return React.createElement(ConnectedFormDataConsumerView, __assign({\n      form: form\n    }, props));\n  });\n};\n\nexport default FormDataConsumer;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-core/esm/form/FormDataConsumer.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","connect","getFormValues","FormName","get","warning","FormDataConsumerView","_a","children","form","formData","source","index","rest","scopedFormData","getSource","getSourceHasBeenCalled","ret","scopedSource","undefined","mapStateToProps","state","record","ConnectedFormDataConsumerView","FormDataConsumer","props","createElement"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { getFormValues, FormName } from 'redux-form';\nimport get from 'lodash/get';\nimport warning from '../util/warning';\n/**\n * Get the current (edited) value of the record from the form and pass it\n * to child function\n *\n * @example\n *\n * const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <BooleanInput source=\"hasEmail\" />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) => formData.hasEmail &&\n *                      <TextInput source=\"email\" {...rest} />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * @example\n *\n * const OrderEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <SelectInput source=\"country\" choices={countries} />\n *             <FormDataConsumer>\n *                 {({ formData, ...rest }) =>\n *                      <SelectInput\n *                          source=\"city\"\n *                          choices={getCitiesFor(formData.country)}\n *                          {...rest}\n *                      />\n *                 }\n *             </FormDataConsumer>\n *         </SimpleForm>\n *     </Edit>\n * );\n */\nexport var FormDataConsumerView = function (_a) {\n    var children = _a.children, form = _a.form, formData = _a.formData, source = _a.source, index = _a.index, rest = __rest(_a, [\"children\", \"form\", \"formData\", \"source\", \"index\"]);\n    var scopedFormData = formData;\n    var getSource;\n    var getSourceHasBeenCalled = false;\n    var ret;\n    // If we have an index, we are in an iterator like component (such as the SimpleFormIterator)\n    if (typeof index !== 'undefined') {\n        scopedFormData = get(formData, source);\n        getSource = function (scopedSource) {\n            getSourceHasBeenCalled = true;\n            return source + \".\" + scopedSource;\n        };\n        ret = children(__assign({ formData: formData, scopedFormData: scopedFormData, getSource: getSource }, rest));\n    }\n    else {\n        ret = children(__assign({ formData: formData }, rest));\n    }\n    warning(typeof index !== 'undefined' && ret && !getSourceHasBeenCalled, \"You're using a FormDataConsumer inside an ArrayInput and you did not called the getSource function supplied by the FormDataConsumer component. This is required for your inputs to get the proper source.\\n\\n<ArrayInput source=\\\"users\\\">\\n    <SimpleFormIterator>\\n        <TextInput source=\\\"name\\\" />\\n\\n        <FormDataConsumer>\\n            {({\\n                formData, // The whole form data\\n                scopedFormData, // The data for this item of the ArrayInput\\n                getSource, // A function to get the valid source inside an ArrayInput\\n                ...rest,\\n            }) =>\\n                scopedFormData.name ? (\\n                    <SelectInput\\n                        source={getSource('role')} // Will translate to \\\"users[0].role\\\"\\n                        choices={['admin', 'user']}\\n                        {...rest}\\n                    />\\n                ) : null\\n            }\\n        </FormDataConsumer>\\n    </SimpleFormIterator>\\n</ArrayInput>\");\n    return ret === undefined ? null : ret;\n};\nvar mapStateToProps = function (state, _a) {\n    var form = _a.form, record = _a.record;\n    return ({\n        formData: getFormValues(form)(state) || record,\n    });\n};\nvar ConnectedFormDataConsumerView = connect(mapStateToProps)(FormDataConsumerView);\nvar FormDataConsumer = function (props) { return (React.createElement(FormName, null, function (_a) {\n    var form = _a.form;\n    return React.createElement(ConnectedFormDataConsumerView, __assign({ form: form }, props));\n})); };\nexport default FormDataConsumer;\n"]},"metadata":{},"sourceType":"module"}