{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport { ReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\nvar styles = createStyles({\n  progress: {\n    marginTop: '1em'\n  }\n});\nexport var ReferenceArrayFieldView = function ReferenceArrayFieldView(_a) {\n  var children = _a.children,\n      className = _a.className,\n      _b = _a.classes,\n      classes = _b === void 0 ? {} : _b,\n      data = _a.data,\n      ids = _a.ids,\n      loadedOnce = _a.loadedOnce,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath;\n\n  if (loadedOnce === false) {\n    return React.createElement(LinearProgress, {\n      className: classes.progress\n    });\n  }\n\n  return React.cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    data: data,\n    loadedOnce: loadedOnce,\n    basePath: referenceBasePath,\n    currentSort: {}\n  });\n};\nReferenceArrayFieldView.propTypes = {\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  loadedOnce: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  reference: PropTypes.string.isRequired,\n  referenceBasePath: PropTypes.string\n};\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\n\nexport var ReferenceArrayField = function ReferenceArrayField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(ReferenceArrayFieldController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ReferenceArrayFieldView, __assign({}, props, __assign({\n      children: children\n    }, controllerProps)));\n  });\n};\nReferenceArrayField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  label: PropTypes.string,\n  record: PropTypes.object.isRequired,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string.isRequired,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired\n};\nvar EnhancedReferenceArrayField = withStyles(styles)(ReferenceArrayField);\nEnhancedReferenceArrayField.defaultProps = {\n  addLabel: true\n};\nEnhancedReferenceArrayField.propTypes = __assign({}, fieldPropTypes, {\n  reference: PropTypes.string,\n  children: PropTypes.element.isRequired\n});\nEnhancedReferenceArrayField.displayName = 'EnhancedReferenceArrayField';\nexport default EnhancedReferenceArrayField;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-ui-materialui/esm/field/ReferenceArrayField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","Children","PropTypes","LinearProgress","withStyles","createStyles","ReferenceArrayFieldController","fieldPropTypes","styles","progress","marginTop","ReferenceArrayFieldView","_a","children","className","_b","classes","data","ids","loadedOnce","reference","referenceBasePath","createElement","cloneElement","only","resource","basePath","currentSort","propTypes","object","string","array","bool","element","isRequired","ReferenceArrayField","props","count","Error","controllerProps","addLabel","label","record","sortBy","source","EnhancedReferenceArrayField","defaultProps","displayName"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React, { Children } from 'react';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { withStyles, createStyles } from '@material-ui/core/styles';\nimport { ReferenceArrayFieldController } from 'ra-core';\nimport { fieldPropTypes } from './types';\nvar styles = createStyles({\n    progress: { marginTop: '1em' },\n});\nexport var ReferenceArrayFieldView = function (_a) {\n    var children = _a.children, className = _a.className, _b = _a.classes, classes = _b === void 0 ? {} : _b, data = _a.data, ids = _a.ids, loadedOnce = _a.loadedOnce, reference = _a.reference, referenceBasePath = _a.referenceBasePath;\n    if (loadedOnce === false) {\n        return React.createElement(LinearProgress, { className: classes.progress });\n    }\n    return React.cloneElement(Children.only(children), {\n        className: className,\n        resource: reference,\n        ids: ids,\n        data: data,\n        loadedOnce: loadedOnce,\n        basePath: referenceBasePath,\n        currentSort: {},\n    });\n};\nReferenceArrayFieldView.propTypes = {\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    data: PropTypes.object,\n    ids: PropTypes.array,\n    loadedOnce: PropTypes.bool,\n    children: PropTypes.element.isRequired,\n    reference: PropTypes.string.isRequired,\n    referenceBasePath: PropTypes.string,\n};\n/**\n * A container component that fetches records from another resource specified\n * by an array of *ids* in current record.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the products of the current order as datagrid\n * // order = {\n * //   id: 123,\n * //   product_ids: [456, 457, 458],\n * // }\n * <ReferenceArrayField label=\"Products\" reference=\"products\" source=\"product_ids\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"description\" />\n *         <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceArrayField>\n *\n * @example Display all the categories of the current product as a list of chips\n * // product = {\n * //   id: 456,\n * //   category_ids: [11, 22, 33],\n * // }\n * <ReferenceArrayField label=\"Categories\" reference=\"categories\" source=\"category_ids\">\n *     <SingleFieldList>\n *         <ChipField source=\"name\" />\n *     </SingleFieldList>\n * </ReferenceArrayField>\n *\n */\nexport var ReferenceArrayField = function (_a) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceArrayField> only accepts a single child (like <Datagrid>)');\n    }\n    return (React.createElement(ReferenceArrayFieldController, __assign({}, props), function (controllerProps) { return (React.createElement(ReferenceArrayFieldView, __assign({}, props, __assign({ children: children }, controllerProps)))); }));\n};\nReferenceArrayField.propTypes = {\n    addLabel: PropTypes.bool,\n    basePath: PropTypes.string.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    children: PropTypes.element.isRequired,\n    label: PropTypes.string,\n    record: PropTypes.object.isRequired,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string.isRequired,\n    sortBy: PropTypes.string,\n    source: PropTypes.string.isRequired,\n};\nvar EnhancedReferenceArrayField = withStyles(styles)(ReferenceArrayField);\nEnhancedReferenceArrayField.defaultProps = {\n    addLabel: true,\n};\nEnhancedReferenceArrayField.propTypes = __assign({}, fieldPropTypes, { reference: PropTypes.string, children: PropTypes.element.isRequired });\nEnhancedReferenceArrayField.displayName = 'EnhancedReferenceArrayField';\nexport default EnhancedReferenceArrayField;\n"]},"metadata":{},"sourceType":"module"}