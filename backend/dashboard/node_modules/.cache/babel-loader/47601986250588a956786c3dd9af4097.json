{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport compose from 'recompose/compose';\nimport { createSelector } from 'reselect';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { crudGetMany as crudGetManyAction, crudGetMatching as crudGetMatchingAction } from '../../actions/dataActions';\nimport { getPossibleReferences, getPossibleReferenceValues, getReferenceResource } from '../../reducer';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport withTranslate from '../../i18n/translate';\n\nvar defaultReferenceSource = function defaultReferenceSource(resource, source) {\n  return resource + \"@\" + source;\n};\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using the\n * `CRUD_GET_MANY` REST method) as well as possible resources (using the\n * `CRUD_GET_MATCHING` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\n\n\nvar UnconnectedReferenceArrayInputController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedReferenceArrayInputController, _super);\n\n  function UnconnectedReferenceArrayInputController(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setFilter = function (filter) {\n      if (filter !== _this.params.filter) {\n        _this.params.filter = _this.props.filterToQuery(filter);\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.setPagination = function (pagination) {\n      if (pagination !== _this.params.pagination) {\n        _this.params.pagination = pagination;\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.setSort = function (sort) {\n      if (sort !== _this.params.sort) {\n        _this.params.sort = sort;\n\n        _this.fetchOptions();\n      }\n    };\n\n    _this.fetchReferences = function (nextProps, currentProps) {\n      if (currentProps === void 0) {\n        currentProps = _this.props;\n      }\n\n      var crudGetMany = nextProps.crudGetMany,\n          input = nextProps.input,\n          reference = nextProps.reference;\n      var ids = input.value;\n\n      if (ids) {\n        if (!Array.isArray(ids)) {\n          throw Error('The value of ReferenceArrayInput should be an array');\n        }\n\n        var idsToFetch = difference(ids, get(currentProps, 'input.value', []));\n        if (idsToFetch.length) crudGetMany(reference, idsToFetch);\n      }\n    };\n\n    _this.fetchOptions = function (props) {\n      if (props === void 0) {\n        props = _this.props;\n      }\n\n      var crudGetMatching = props.crudGetMatching,\n          reference = props.reference,\n          source = props.source,\n          resource = props.resource,\n          referenceSource = props.referenceSource,\n          defaultFilter = props.filter;\n      var _a = _this.params,\n          pagination = _a.pagination,\n          sort = _a.sort,\n          filter = _a.filter;\n      crudGetMatching(reference, referenceSource(resource, source), pagination, sort, __assign({}, defaultFilter, filter));\n    };\n\n    var perPage = props.perPage,\n        sort = props.sort,\n        filter = props.filter; // stored as a property rather than state because we don't want redraw of async updates\n\n    _this.params = {\n      pagination: {\n        page: 1,\n        perPage: perPage\n      },\n      sort: sort,\n      filter: filter\n    };\n    _this.debouncedSetFilter = debounce(_this.setFilter.bind(_this), 500);\n    return _this;\n  }\n\n  UnconnectedReferenceArrayInputController.prototype.componentDidMount = function () {\n    this.fetchReferencesAndOptions(this.props, {});\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.componentWillReceiveProps = function (nextProps) {\n    var shouldFetchOptions = false;\n\n    if ((this.props.record || {\n      id: undefined\n    }).id !== (nextProps.record || {\n      id: undefined\n    }).id) {\n      this.fetchReferencesAndOptions(nextProps);\n    } else if (this.props.input.value !== nextProps.input.value) {\n      this.fetchReferences(nextProps);\n    } else {\n      if (!isEqual(nextProps.filter, this.props.filter)) {\n        this.params = __assign({}, this.params, {\n          filter: nextProps.filter\n        });\n        shouldFetchOptions = true;\n      }\n\n      if (!isEqual(nextProps.sort, this.props.sort)) {\n        this.params = __assign({}, this.params, {\n          sort: nextProps.sort\n        });\n        shouldFetchOptions = true;\n      }\n\n      if (nextProps.perPage !== this.props.perPage) {\n        this.params = __assign({}, this.params, {\n          pagination: __assign({}, this.params.pagination, {\n            perPage: nextProps.perPage\n          })\n        });\n        shouldFetchOptions = true;\n      }\n    }\n\n    if (shouldFetchOptions) {\n      this.fetchOptions();\n    }\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.fetchReferencesAndOptions = function (nextProps, currentProps) {\n    if (currentProps === void 0) {\n      currentProps = this.props;\n    }\n\n    this.fetchReferences(nextProps, currentProps);\n    this.fetchOptions(nextProps);\n  };\n\n  UnconnectedReferenceArrayInputController.prototype.render = function () {\n    var _a = this.props,\n        input = _a.input,\n        referenceRecords = _a.referenceRecords,\n        matchingReferences = _a.matchingReferences,\n        onChange = _a.onChange,\n        children = _a.children,\n        translate = _a.translate;\n    var dataStatus = getDataStatus({\n      input: input,\n      matchingReferences: matchingReferences,\n      referenceRecords: referenceRecords,\n      translate: translate\n    });\n    return children({\n      choices: dataStatus.choices,\n      error: dataStatus.error,\n      isLoading: dataStatus.waiting,\n      onChange: onChange,\n      setFilter: this.debouncedSetFilter,\n      setPagination: this.setPagination,\n      setSort: this.setSort,\n      warning: dataStatus.warning\n    });\n  };\n\n  UnconnectedReferenceArrayInputController.defaultProps = {\n    allowEmpty: false,\n    filter: {},\n    filterToQuery: function filterToQuery(searchText) {\n      return {\n        q: searchText\n      };\n    },\n    matchingReferences: null,\n    perPage: 25,\n    sort: {\n      field: 'id',\n      order: 'DESC'\n    },\n    referenceRecords: [],\n    referenceSource: defaultReferenceSource\n  };\n  return UnconnectedReferenceArrayInputController;\n}(Component);\n\nexport { UnconnectedReferenceArrayInputController };\n\nvar makeMapStateToProps = function makeMapStateToProps() {\n  return createSelector([getReferenceResource, getPossibleReferenceValues, function (_, _a) {\n    var resource = _a.resource,\n        input = _a.input;\n    var referenceIds = input.value;\n\n    if (!referenceIds) {\n      return [];\n    }\n\n    if (Array.isArray(referenceIds)) {\n      return referenceIds;\n    }\n\n    throw new Error(\"<ReferenceArrayInput> expects value to be an array, but the value passed as '\" + resource + \".\" + input.name + \"' is type '\" + typeof referenceIds + \"': \" + referenceIds);\n  }], function (referenceState, possibleValues, inputIds) {\n    return {\n      matchingReferences: getPossibleReferences(referenceState, possibleValues, inputIds),\n      referenceRecords: referenceState && inputIds.reduce(function (references, referenceId) {\n        if (referenceState.data[referenceId]) {\n          references.push(referenceState.data[referenceId]);\n        }\n\n        return references;\n      }, [])\n    };\n  });\n};\n\nvar ReferenceArrayInputController = compose(withTranslate, connect(makeMapStateToProps(), {\n  crudGetMany: crudGetManyAction,\n  crudGetMatching: crudGetMatchingAction\n}))(UnconnectedReferenceArrayInputController);\nReferenceArrayInputController.defaultProps = {\n  referenceSource: defaultReferenceSource\n};\nexport default ReferenceArrayInputController;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-core/esm/controller/input/ReferenceArrayInputController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","Component","connect","debounce","compose","createSelector","get","isEqual","difference","crudGetMany","crudGetManyAction","crudGetMatching","crudGetMatchingAction","getPossibleReferences","getPossibleReferenceValues","getReferenceResource","getStatusForArrayInput","getDataStatus","withTranslate","defaultReferenceSource","resource","source","UnconnectedReferenceArrayInputController","_super","props","_this","setFilter","filter","params","filterToQuery","fetchOptions","setPagination","pagination","setSort","sort","fetchReferences","nextProps","currentProps","input","reference","ids","value","isArray","Error","idsToFetch","referenceSource","defaultFilter","_a","perPage","page","debouncedSetFilter","bind","componentDidMount","fetchReferencesAndOptions","componentWillReceiveProps","shouldFetchOptions","record","id","undefined","render","referenceRecords","matchingReferences","onChange","children","translate","dataStatus","choices","error","isLoading","waiting","warning","defaultProps","allowEmpty","searchText","q","field","order","makeMapStateToProps","_","referenceIds","name","referenceState","possibleValues","inputIds","reduce","references","referenceId","data","push","ReferenceArrayInputController"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport compose from 'recompose/compose';\nimport { createSelector } from 'reselect';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { crudGetMany as crudGetManyAction, crudGetMatching as crudGetMatchingAction, } from '../../actions/dataActions';\nimport { getPossibleReferences, getPossibleReferenceValues, getReferenceResource, } from '../../reducer';\nimport { getStatusForArrayInput as getDataStatus } from './referenceDataStatus';\nimport withTranslate from '../../i18n/translate';\nvar defaultReferenceSource = function (resource, source) {\n    return resource + \"@\" + source;\n};\n/**\n * An Input component for fields containing a list of references to another resource.\n * Useful for 'hasMany' relationship.\n *\n * @example\n * The post object has many tags, so the post resource looks like:\n * {\n *    id: 1234,\n *    tag_ids: [ \"1\", \"23\", \"4\" ]\n * }\n *\n * ReferenceArrayInput component fetches the current resources (using the\n * `CRUD_GET_MANY` REST method) as well as possible resources (using the\n * `CRUD_GET_MATCHING` REST method) in the reference endpoint. It then\n * delegates rendering to a subcomponent, to which it passes the possible\n * choices as the `choices` attribute.\n *\n * Use it with a selector component as child, like `<SelectArrayInput>`\n * or <CheckboxGroupInput>.\n *\n * @example\n * export const PostEdit = (props) => (\n *     <Edit {...props}>\n *         <SimpleForm>\n *             <ReferenceArrayInput source=\"tag_ids\" reference=\"tags\">\n *                 <SelectArrayInput optionText=\"name\" />\n *             </ReferenceArrayInput>\n *         </SimpleForm>\n *     </Edit>\n * );\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      perPage={100}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      sort={{ field: 'name', order: 'ASC' }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filter={{ is_public: true }}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n *\n * The enclosed component may filter results. ReferenceArrayInput passes a\n * `setFilter` function as prop to its child component. It uses the value to\n * create a filter for the query - by default { q: [searchText] }. You can\n * customize the mapping searchText => searchQuery by setting a custom\n * `filterToQuery` function prop:\n *\n * @example\n * <ReferenceArrayInput\n *      source=\"tag_ids\"\n *      reference=\"tags\"\n *      filterToQuery={searchText => ({ name: searchText })}>\n *     <SelectArrayInput optionText=\"name\" />\n * </ReferenceArrayInput>\n */\nvar UnconnectedReferenceArrayInputController = /** @class */ (function (_super) {\n    __extends(UnconnectedReferenceArrayInputController, _super);\n    function UnconnectedReferenceArrayInputController(props) {\n        var _this = _super.call(this, props) || this;\n        _this.setFilter = function (filter) {\n            if (filter !== _this.params.filter) {\n                _this.params.filter = _this.props.filterToQuery(filter);\n                _this.fetchOptions();\n            }\n        };\n        _this.setPagination = function (pagination) {\n            if (pagination !== _this.params.pagination) {\n                _this.params.pagination = pagination;\n                _this.fetchOptions();\n            }\n        };\n        _this.setSort = function (sort) {\n            if (sort !== _this.params.sort) {\n                _this.params.sort = sort;\n                _this.fetchOptions();\n            }\n        };\n        _this.fetchReferences = function (nextProps, currentProps) {\n            if (currentProps === void 0) { currentProps = _this.props; }\n            var crudGetMany = nextProps.crudGetMany, input = nextProps.input, reference = nextProps.reference;\n            var ids = input.value;\n            if (ids) {\n                if (!Array.isArray(ids)) {\n                    throw Error('The value of ReferenceArrayInput should be an array');\n                }\n                var idsToFetch = difference(ids, get(currentProps, 'input.value', []));\n                if (idsToFetch.length)\n                    crudGetMany(reference, idsToFetch);\n            }\n        };\n        _this.fetchOptions = function (props) {\n            if (props === void 0) { props = _this.props; }\n            var crudGetMatching = props.crudGetMatching, reference = props.reference, source = props.source, resource = props.resource, referenceSource = props.referenceSource, defaultFilter = props.filter;\n            var _a = _this.params, pagination = _a.pagination, sort = _a.sort, filter = _a.filter;\n            crudGetMatching(reference, referenceSource(resource, source), pagination, sort, __assign({}, defaultFilter, filter));\n        };\n        var perPage = props.perPage, sort = props.sort, filter = props.filter;\n        // stored as a property rather than state because we don't want redraw of async updates\n        _this.params = { pagination: { page: 1, perPage: perPage }, sort: sort, filter: filter };\n        _this.debouncedSetFilter = debounce(_this.setFilter.bind(_this), 500);\n        return _this;\n    }\n    UnconnectedReferenceArrayInputController.prototype.componentDidMount = function () {\n        this.fetchReferencesAndOptions(this.props, {});\n    };\n    UnconnectedReferenceArrayInputController.prototype.componentWillReceiveProps = function (nextProps) {\n        var shouldFetchOptions = false;\n        if ((this.props.record || { id: undefined }).id !==\n            (nextProps.record || { id: undefined }).id) {\n            this.fetchReferencesAndOptions(nextProps);\n        }\n        else if (this.props.input.value !== nextProps.input.value) {\n            this.fetchReferences(nextProps);\n        }\n        else {\n            if (!isEqual(nextProps.filter, this.props.filter)) {\n                this.params = __assign({}, this.params, { filter: nextProps.filter });\n                shouldFetchOptions = true;\n            }\n            if (!isEqual(nextProps.sort, this.props.sort)) {\n                this.params = __assign({}, this.params, { sort: nextProps.sort });\n                shouldFetchOptions = true;\n            }\n            if (nextProps.perPage !== this.props.perPage) {\n                this.params = __assign({}, this.params, { pagination: __assign({}, this.params.pagination, { perPage: nextProps.perPage }) });\n                shouldFetchOptions = true;\n            }\n        }\n        if (shouldFetchOptions) {\n            this.fetchOptions();\n        }\n    };\n    UnconnectedReferenceArrayInputController.prototype.fetchReferencesAndOptions = function (nextProps, currentProps) {\n        if (currentProps === void 0) { currentProps = this.props; }\n        this.fetchReferences(nextProps, currentProps);\n        this.fetchOptions(nextProps);\n    };\n    UnconnectedReferenceArrayInputController.prototype.render = function () {\n        var _a = this.props, input = _a.input, referenceRecords = _a.referenceRecords, matchingReferences = _a.matchingReferences, onChange = _a.onChange, children = _a.children, translate = _a.translate;\n        var dataStatus = getDataStatus({\n            input: input,\n            matchingReferences: matchingReferences,\n            referenceRecords: referenceRecords,\n            translate: translate,\n        });\n        return children({\n            choices: dataStatus.choices,\n            error: dataStatus.error,\n            isLoading: dataStatus.waiting,\n            onChange: onChange,\n            setFilter: this.debouncedSetFilter,\n            setPagination: this.setPagination,\n            setSort: this.setSort,\n            warning: dataStatus.warning,\n        });\n    };\n    UnconnectedReferenceArrayInputController.defaultProps = {\n        allowEmpty: false,\n        filter: {},\n        filterToQuery: function (searchText) { return ({ q: searchText }); },\n        matchingReferences: null,\n        perPage: 25,\n        sort: { field: 'id', order: 'DESC' },\n        referenceRecords: [],\n        referenceSource: defaultReferenceSource,\n    };\n    return UnconnectedReferenceArrayInputController;\n}(Component));\nexport { UnconnectedReferenceArrayInputController };\nvar makeMapStateToProps = function () {\n    return createSelector([\n        getReferenceResource,\n        getPossibleReferenceValues,\n        function (_, _a) {\n            var resource = _a.resource, input = _a.input;\n            var referenceIds = input.value;\n            if (!referenceIds) {\n                return [];\n            }\n            if (Array.isArray(referenceIds)) {\n                return referenceIds;\n            }\n            throw new Error(\"<ReferenceArrayInput> expects value to be an array, but the value passed as '\" + resource + \".\" + input.name + \"' is type '\" + typeof referenceIds + \"': \" + referenceIds);\n        },\n    ], function (referenceState, possibleValues, inputIds) { return ({\n        matchingReferences: getPossibleReferences(referenceState, possibleValues, inputIds),\n        referenceRecords: referenceState &&\n            inputIds.reduce(function (references, referenceId) {\n                if (referenceState.data[referenceId]) {\n                    references.push(referenceState.data[referenceId]);\n                }\n                return references;\n            }, []),\n    }); });\n};\nvar ReferenceArrayInputController = compose(withTranslate, connect(makeMapStateToProps(), {\n    crudGetMany: crudGetManyAction,\n    crudGetMatching: crudGetMatchingAction,\n}))(UnconnectedReferenceArrayInputController);\nReferenceArrayInputController.defaultProps = {\n    referenceSource: defaultReferenceSource,\n};\nexport default ReferenceArrayInputController;\n"]},"metadata":{},"sourceType":"module"}