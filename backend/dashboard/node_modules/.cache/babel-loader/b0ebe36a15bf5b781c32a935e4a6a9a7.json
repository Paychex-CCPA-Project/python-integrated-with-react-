{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Fragment, cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReferenceManyFieldController } from 'ra-core';\nexport var ReferenceManyFieldView = function ReferenceManyFieldView(_a) {\n  var children = _a.children,\n      className = _a.className,\n      currentSort = _a.currentSort,\n      data = _a.data,\n      ids = _a.ids,\n      loadedOnce = _a.loadedOnce,\n      page = _a.page,\n      pagination = _a.pagination,\n      perPage = _a.perPage,\n      reference = _a.reference,\n      referenceBasePath = _a.referenceBasePath,\n      setPage = _a.setPage,\n      setPerPage = _a.setPerPage,\n      setSort = _a.setSort,\n      total = _a.total;\n  return React.createElement(Fragment, null, cloneElement(Children.only(children), {\n    className: className,\n    resource: reference,\n    ids: ids,\n    loadedOnce: loadedOnce,\n    data: data,\n    basePath: referenceBasePath,\n    currentSort: currentSort,\n    setSort: setSort,\n    total: total\n  }), pagination && total !== undefined && cloneElement(pagination, {\n    page: page,\n    perPage: perPage,\n    setPage: setPage,\n    setPerPage: setPerPage,\n    total: total\n  }));\n};\nReferenceManyFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  currentSort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  data: PropTypes.object,\n  ids: PropTypes.array,\n  loadedOnce: PropTypes.bool,\n  pagination: PropTypes.element,\n  reference: PropTypes.string,\n  referenceBasePath: PropTypes.string,\n  setSort: PropTypes.func\n};\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nexport var ReferenceManyField = function ReferenceManyField(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  if (React.Children.count(children) !== 1) {\n    throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n  }\n\n  return React.createElement(ReferenceManyFieldController, __assign({}, props), function (controllerProps) {\n    return React.createElement(ReferenceManyFieldView, __assign({}, props, __assign({\n      children: children\n    }, controllerProps)));\n  });\n};\nReferenceManyField.propTypes = {\n  addLabel: PropTypes.bool,\n  basePath: PropTypes.string,\n  children: PropTypes.element.isRequired,\n  classes: PropTypes.object,\n  className: PropTypes.string,\n  filter: PropTypes.object,\n  label: PropTypes.string,\n  perPage: PropTypes.number,\n  record: PropTypes.object,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  source: PropTypes.string.isRequired,\n  sort: PropTypes.shape({\n    field: PropTypes.string,\n    order: PropTypes.string\n  }),\n  target: PropTypes.string.isRequired\n};\nReferenceManyField.defaultProps = {\n  filter: {},\n  perPage: 25,\n  sort: {\n    field: 'id',\n    order: 'DESC'\n  },\n  source: 'id',\n  addLabel: true\n};\nexport default ReferenceManyField;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-ui-materialui/esm/field/ReferenceManyField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","Fragment","cloneElement","Children","PropTypes","ReferenceManyFieldController","ReferenceManyFieldView","_a","children","className","currentSort","data","ids","loadedOnce","page","pagination","perPage","reference","referenceBasePath","setPage","setPerPage","setSort","total","createElement","only","resource","basePath","undefined","propTypes","element","string","shape","field","order","object","array","bool","func","ReferenceManyField","props","count","Error","controllerProps","addLabel","isRequired","classes","filter","label","number","record","sortBy","source","sort","target","defaultProps"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React, { Fragment, cloneElement, Children } from 'react';\nimport PropTypes from 'prop-types';\nimport { ReferenceManyFieldController } from 'ra-core';\nexport var ReferenceManyFieldView = function (_a) {\n    var children = _a.children, className = _a.className, currentSort = _a.currentSort, data = _a.data, ids = _a.ids, loadedOnce = _a.loadedOnce, page = _a.page, pagination = _a.pagination, perPage = _a.perPage, reference = _a.reference, referenceBasePath = _a.referenceBasePath, setPage = _a.setPage, setPerPage = _a.setPerPage, setSort = _a.setSort, total = _a.total;\n    return (React.createElement(Fragment, null,\n        cloneElement(Children.only(children), {\n            className: className,\n            resource: reference,\n            ids: ids,\n            loadedOnce: loadedOnce,\n            data: data,\n            basePath: referenceBasePath,\n            currentSort: currentSort,\n            setSort: setSort,\n            total: total,\n        }),\n        pagination &&\n            total !== undefined &&\n            cloneElement(pagination, {\n                page: page,\n                perPage: perPage,\n                setPage: setPage,\n                setPerPage: setPerPage,\n                total: total,\n            })));\n};\nReferenceManyFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    currentSort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    data: PropTypes.object,\n    ids: PropTypes.array,\n    loadedOnce: PropTypes.bool,\n    pagination: PropTypes.element,\n    reference: PropTypes.string,\n    referenceBasePath: PropTypes.string,\n    setSort: PropTypes.func,\n};\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nexport var ReferenceManyField = function (_a) {\n    var children = _a.children, props = __rest(_a, [\"children\"]);\n    if (React.Children.count(children) !== 1) {\n        throw new Error('<ReferenceManyField> only accepts a single child (like <Datagrid>)');\n    }\n    return (React.createElement(ReferenceManyFieldController, __assign({}, props), function (controllerProps) { return (React.createElement(ReferenceManyFieldView, __assign({}, props, __assign({ children: children }, controllerProps)))); }));\n};\nReferenceManyField.propTypes = {\n    addLabel: PropTypes.bool,\n    basePath: PropTypes.string,\n    children: PropTypes.element.isRequired,\n    classes: PropTypes.object,\n    className: PropTypes.string,\n    filter: PropTypes.object,\n    label: PropTypes.string,\n    perPage: PropTypes.number,\n    record: PropTypes.object,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    source: PropTypes.string.isRequired,\n    sort: PropTypes.shape({\n        field: PropTypes.string,\n        order: PropTypes.string,\n    }),\n    target: PropTypes.string.isRequired,\n};\nReferenceManyField.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: { field: 'id', order: 'DESC' },\n    source: 'id',\n    addLabel: true,\n};\nexport default ReferenceManyField;\n"]},"metadata":{},"sourceType":"module"}