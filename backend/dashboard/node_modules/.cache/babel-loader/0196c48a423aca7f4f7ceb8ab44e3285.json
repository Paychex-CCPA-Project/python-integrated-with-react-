{"ast":null,"code":"import { LOCATION_CHANGE } from 'react-router-redux';\nimport { destroy } from 'redux-form';\nimport isEqual from 'lodash/isEqual';\nimport { resetForm } from '../actions/formActions';\nimport { REDUX_FORM_NAME } from './constants';\n/**\n * This middleware ensure that whenever a location change happen, we get the\n * chance to properly reset the redux-form record form, preventing data to be\n * kept between different resources or form types (CREATE, EDIT).\n *\n * A middleware is needed instead of a saga because we need to control the actions\n * order: we need to ensure we reset the redux form BEFORE the location actually\n * changes. Otherwise, the new page which may contain a record redux-form might\n * initialize before our reset and loose its data.\n */\n\nvar formMiddleware = function formMiddleware() {\n  var previousLocation;\n  return function (next) {\n    return function (action) {\n      if (action.type !== LOCATION_CHANGE || action.payload.state && action.payload.state.skipFormReset) {\n        return next(action);\n      } // history allows one to redirect to the same location which can happen\n      // when using a special menu for a create page for instance. In this case,\n      // we don't want to reset the form.\n      // See https://github.com/marmelab/react-admin/issues/2291\n\n\n      if (isEqual(action.payload, previousLocation)) {\n        return next(action);\n      }\n\n      previousLocation = action.payload;\n      next(resetForm());\n      next(destroy(REDUX_FORM_NAME));\n      return next(action);\n    };\n  };\n};\n\nexport default formMiddleware;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-core/esm/form/formMiddleware.js"],"names":["LOCATION_CHANGE","destroy","isEqual","resetForm","REDUX_FORM_NAME","formMiddleware","previousLocation","next","action","type","payload","state","skipFormReset"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,eAAT,QAAgC,aAAhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,GAAY;AAC7B,MAAIC,gBAAJ;AACA,SAAO,UAAUC,IAAV,EAAgB;AAAE,WAAO,UAAUC,MAAV,EAAkB;AAC9C,UAAIA,MAAM,CAACC,IAAP,KAAgBT,eAAhB,IACCQ,MAAM,CAACE,OAAP,CAAeC,KAAf,IAAwBH,MAAM,CAACE,OAAP,CAAeC,KAAf,CAAqBC,aADlD,EACkE;AAC9D,eAAOL,IAAI,CAACC,MAAD,CAAX;AACH,OAJ6C,CAK9C;AACA;AACA;AACA;;;AACA,UAAIN,OAAO,CAACM,MAAM,CAACE,OAAR,EAAiBJ,gBAAjB,CAAX,EAA+C;AAC3C,eAAOC,IAAI,CAACC,MAAD,CAAX;AACH;;AACDF,MAAAA,gBAAgB,GAAGE,MAAM,CAACE,OAA1B;AACAH,MAAAA,IAAI,CAACJ,SAAS,EAAV,CAAJ;AACAI,MAAAA,IAAI,CAACN,OAAO,CAACG,eAAD,CAAR,CAAJ;AACA,aAAOG,IAAI,CAACC,MAAD,CAAX;AACH,KAhBwB;AAgBrB,GAhBJ;AAiBH,CAnBD;;AAoBA,eAAeH,cAAf","sourcesContent":["import { LOCATION_CHANGE } from 'react-router-redux';\nimport { destroy } from 'redux-form';\nimport isEqual from 'lodash/isEqual';\nimport { resetForm } from '../actions/formActions';\nimport { REDUX_FORM_NAME } from './constants';\n/**\n * This middleware ensure that whenever a location change happen, we get the\n * chance to properly reset the redux-form record form, preventing data to be\n * kept between different resources or form types (CREATE, EDIT).\n *\n * A middleware is needed instead of a saga because we need to control the actions\n * order: we need to ensure we reset the redux form BEFORE the location actually\n * changes. Otherwise, the new page which may contain a record redux-form might\n * initialize before our reset and loose its data.\n */\nvar formMiddleware = function () {\n    var previousLocation;\n    return function (next) { return function (action) {\n        if (action.type !== LOCATION_CHANGE ||\n            (action.payload.state && action.payload.state.skipFormReset)) {\n            return next(action);\n        }\n        // history allows one to redirect to the same location which can happen\n        // when using a special menu for a create page for instance. In this case,\n        // we don't want to reset the form.\n        // See https://github.com/marmelab/react-admin/issues/2291\n        if (isEqual(action.payload, previousLocation)) {\n            return next(action);\n        }\n        previousLocation = action.payload;\n        next(resetForm());\n        next(destroy(REDUX_FORM_NAME));\n        return next(action);\n    }; };\n};\nexport default formMiddleware;\n"]},"metadata":{},"sourceType":"module"}