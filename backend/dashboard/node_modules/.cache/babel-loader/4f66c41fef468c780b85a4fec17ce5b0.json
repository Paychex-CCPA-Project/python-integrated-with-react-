{"ast":null,"code":"var queue = [];\n/**\n  Variable to hold a counting semaphore\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\n    already suspended)\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\n    triggers flushing the queued tasks.\n**/\n\nvar semaphore = 0;\n/**\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\n  and flushed after this task has finished (assuming the scheduler endup in a released\n  state).\n**/\n\nfunction exec(task) {\n  try {\n    suspend();\n    task();\n  } finally {\n    release();\n  }\n}\n/**\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\n**/\n\n\nexport function asap(task) {\n  queue.push(task);\n\n  if (!semaphore) {\n    suspend();\n    flush();\n  }\n}\n/**\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\n  scheduler is released.\n**/\n\nexport function suspend() {\n  semaphore++;\n}\n/**\n  Puts the scheduler in a `released` state.\n**/\n\nfunction release() {\n  semaphore--;\n}\n/**\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\n**/\n\n\nexport function flush() {\n  release();\n  var task = void 0;\n\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task);\n  }\n}","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/redux-saga/es/internal/scheduler.js"],"names":["queue","semaphore","exec","task","suspend","release","asap","push","flush","shift","undefined"],"mappings":"AAAA,IAAIA,KAAK,GAAG,EAAZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,CAAcC,IAAd,EAAoB;AAClB,MAAI;AACFC,IAAAA,OAAO;AACPD,IAAAA,IAAI;AACL,GAHD,SAGU;AACRE,IAAAA,OAAO;AACR;AACF;AAED;AACA;AACA;;;AACA,OAAO,SAASC,IAAT,CAAcH,IAAd,EAAoB;AACzBH,EAAAA,KAAK,CAACO,IAAN,CAAWJ,IAAX;;AAEA,MAAI,CAACF,SAAL,EAAgB;AACdG,IAAAA,OAAO;AACPI,IAAAA,KAAK;AACN;AACF;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASJ,OAAT,GAAmB;AACxBH,EAAAA,SAAS;AACV;AAED;AACA;AACA;;AACA,SAASI,OAAT,GAAmB;AACjBJ,EAAAA,SAAS;AACV;AAED;AACA;AACA;;;AACA,OAAO,SAASO,KAAT,GAAiB;AACtBH,EAAAA,OAAO;AAEP,MAAIF,IAAI,GAAG,KAAK,CAAhB;;AACA,SAAO,CAACF,SAAD,IAAc,CAACE,IAAI,GAAGH,KAAK,CAACS,KAAN,EAAR,MAA2BC,SAAhD,EAA2D;AACzDR,IAAAA,IAAI,CAACC,IAAD,CAAJ;AACD;AACF","sourcesContent":["var queue = [];\n/**\n  Variable to hold a counting semaphore\n  - Incrementing adds a lock and puts the scheduler in a `suspended` state (if it's not\n    already suspended)\n  - Decrementing releases a lock. Zero locks puts the scheduler in a `released` state. This\n    triggers flushing the queued tasks.\n**/\nvar semaphore = 0;\n\n/**\n  Executes a task 'atomically'. Tasks scheduled during this execution will be queued\n  and flushed after this task has finished (assuming the scheduler endup in a released\n  state).\n**/\nfunction exec(task) {\n  try {\n    suspend();\n    task();\n  } finally {\n    release();\n  }\n}\n\n/**\n  Executes or queues a task depending on the state of the scheduler (`suspended` or `released`)\n**/\nexport function asap(task) {\n  queue.push(task);\n\n  if (!semaphore) {\n    suspend();\n    flush();\n  }\n}\n\n/**\n  Puts the scheduler in a `suspended` state. Scheduled tasks will be queued until the\n  scheduler is released.\n**/\nexport function suspend() {\n  semaphore++;\n}\n\n/**\n  Puts the scheduler in a `released` state.\n**/\nfunction release() {\n  semaphore--;\n}\n\n/**\n  Releases the current lock. Executes all queued tasks if the scheduler is in the released state.\n**/\nexport function flush() {\n  release();\n\n  var task = void 0;\n  while (!semaphore && (task = queue.shift()) !== undefined) {\n    exec(task);\n  }\n}"]},"metadata":{},"sourceType":"module"}