{"ast":null,"code":"import _defineProperty from \"/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { stringify } from 'query-string';\nimport { fetchUtils, GET_LIST, GET_ONE, CREATE, UPDATE, UPDATE_MANY, DELETE, DELETE_MANY, GET_MANY, GET_MANY_REFERENCE } from 'react-admin';\n/**\n * Maps react-admin queries to the default format of Django REST Framework\n */\n\nvar drfProvider = function drfProvider(apiUrl) {\n  var httpClient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : fetchUtils.fetchJson;\n\n  /**\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Object} { url, options } The HTTP request parameters\n   */\n  var convertDataRequestToHttp = function convertDataRequestToHttp(type, resource, params) {\n    var url = \"\";\n    var options = {};\n\n    switch (type) {\n      case CREATE:\n        url = \"\".concat(apiUrl, \"/\").concat(resource, \"/\");\n        options.method = 'POST';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case GET_ONE:\n        url = \"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id, \"/\");\n        break;\n\n      case GET_LIST:\n        {\n          var _params$pagination = params.pagination,\n              page = _params$pagination.page,\n              perPage = _params$pagination.perPage;\n          var _params$sort = params.sort,\n              field = _params$sort.field,\n              order = _params$sort.order;\n          var filter = params.filter;\n\n          var query = _objectSpread({\n            page: page,\n            page_size: perPage,\n            ordering: \"\".concat(order === 'ASC' ? '' : '-').concat(field)\n          }, filter);\n\n          url = \"\".concat(apiUrl, \"/\").concat(resource, \"/?\").concat(stringify(query));\n          break;\n        }\n\n      case GET_MANY_REFERENCE:\n        {\n          var _params$pagination2 = params.pagination,\n              _page = _params$pagination2.page,\n              _perPage = _params$pagination2.perPage;\n          var _params$sort2 = params.sort,\n              _field = _params$sort2.field,\n              _order = _params$sort2.order;\n          var _filter = params.filter,\n              target = params.target,\n              id = params.id;\n\n          var _query = _objectSpread(_objectSpread({\n            page: _page,\n            page_size: _perPage,\n            ordering: \"\".concat(_order === 'ASC' ? '' : '-').concat(_field)\n          }, _filter), {}, _defineProperty({}, target, id));\n\n          url = \"\".concat(apiUrl, \"/\").concat(resource, \"/?\").concat(stringify(_query));\n          break;\n        }\n\n      case UPDATE:\n        url = \"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id, \"/\");\n        options.method = 'PUT';\n        options.body = JSON.stringify(params.data);\n        break;\n\n      case DELETE:\n        url = \"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(params.id, \"/\");\n        options.method = 'DELETE';\n        break;\n\n      default:\n        throw new Error(\"Unsupported Data Provider request type \".concat(type));\n    }\n\n    return {\n      url: url,\n      options: options\n    };\n  };\n  /**\n   * @param {Object} response HTTP response from fetch()\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Object} Data response\n   */\n\n\n  var convertHttpResponse = function convertHttpResponse(response, type, resource, params) {\n    var headers = response.headers,\n        json = response.json;\n\n    switch (type) {\n      case GET_LIST:\n      case GET_MANY_REFERENCE:\n        if ('count' in json) {\n          return {\n            data: json.results,\n            total: json.count\n          };\n        } else if (headers.has('content-range')) {\n          return {\n            data: json,\n            total: parseInt(headers.get('content-range').split('/').pop(), 10)\n          };\n        } else if ('detail' in json && json.detail === 'Invalid page.') {\n          return {\n            data: [],\n            total: 0\n          };\n        } else {\n          throw new Error('The total number of results is unknown. The DRF data provider ' + 'expects responses for lists of resources to contain this ' + 'information to build the pagination. If you\\'re not using the ' + 'default PageNumberPagination class, please include this ' + 'information using the Content-Range header OR a \"count\" key ' + 'inside the response.');\n        }\n\n      case CREATE:\n        return {\n          data: _objectSpread(_objectSpread({}, params.data), {}, {\n            id: json.id\n          })\n        };\n\n      case DELETE:\n        return {\n          data: params.previousData\n        };\n\n      default:\n        return {\n          data: json\n        };\n    }\n  };\n  /**\n   * @param {String} type React-admin request type, e.g. 'GET_LIST'\n   * @param {string} resource Name of the resource to fetch, e.g. 'posts'\n   * @param {Object} params Request parameters. Depends on the request type\n   * @returns {Promise} the Promise for a data response\n   */\n\n\n  return function (type, resource, params) {\n    /**\n     * Split GET_MANY, UPDATE_MANY and DELETE_MANY requests into multiple promises,\n     * since they're not supported by default.\n     */\n    switch (type) {\n      case GET_MANY:\n        return Promise.all(params.ids.map(function (id) {\n          return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id, \"/\"), {\n            method: 'GET'\n          });\n        })).then(function (responses) {\n          return {\n            data: responses.map(function (response) {\n              return response.json;\n            })\n          };\n        });\n\n      case UPDATE_MANY:\n        return Promise.all(params.ids.map(function (id) {\n          return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n            method: 'PUT',\n            body: JSON.stringify(params.data)\n          });\n        })).then(function (responses) {\n          return {\n            data: responses.map(function (response) {\n              return response.json;\n            })\n          };\n        });\n\n      case DELETE_MANY:\n        return Promise.all(params.ids.map(function (id) {\n          return httpClient(\"\".concat(apiUrl, \"/\").concat(resource, \"/\").concat(id), {\n            method: 'DELETE'\n          });\n        })).then(function (responses) {\n          return {\n            data: responses.map(function (response) {\n              return response.json;\n            })\n          };\n        });\n\n      default:\n        break;\n    }\n\n    var _convertDataRequestTo = convertDataRequestToHttp(type, resource, params),\n        url = _convertDataRequestTo.url,\n        options = _convertDataRequestTo.options;\n\n    return httpClient(url, options).then(function (response) {\n      return convertHttpResponse(response, type, resource, params);\n    });\n  };\n};\n\nexport default drfProvider;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/src/index.js"],"names":["stringify","fetchUtils","GET_LIST","GET_ONE","CREATE","UPDATE","UPDATE_MANY","DELETE","DELETE_MANY","GET_MANY","GET_MANY_REFERENCE","drfProvider","apiUrl","httpClient","fetchJson","convertDataRequestToHttp","type","resource","params","url","options","method","body","JSON","data","id","pagination","page","perPage","sort","field","order","filter","query","page_size","ordering","target","Error","convertHttpResponse","response","headers","json","results","total","count","has","parseInt","get","split","pop","detail","previousData","Promise","all","ids","map","then","responses"],"mappings":"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","sourcesContent":["import { stringify } from 'query-string';\nimport {\n    fetchUtils,\n    GET_LIST,\n    GET_ONE,\n    CREATE,\n    UPDATE,\n    UPDATE_MANY,\n    DELETE,\n    DELETE_MANY,\n    GET_MANY,\n    GET_MANY_REFERENCE,\n} from 'react-admin';\n\n\n/**\n * Maps react-admin queries to the default format of Django REST Framework\n */\nconst drfProvider = (apiUrl, httpClient=fetchUtils.fetchJson) => {\n\n    /**\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Object} { url, options } The HTTP request parameters\n     */\n    const convertDataRequestToHttp = (type, resource, params) => {\n        let url = \"\";\n        let options = {};\n\n        switch(type){\n            case CREATE:\n                url = `${apiUrl}/${resource}/`;\n                options.method = 'POST';\n                options.body = JSON.stringify(params.data);\n                break;\n            case GET_ONE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                break;\n            case GET_LIST: {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const { filter } = params;\n                const query = {\n                    page,\n                    page_size: perPage,\n                    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n                    ...filter\n                };\n                url = `${apiUrl}/${resource}/?${stringify(query)}`;\n                break;\n            }\n            case GET_MANY_REFERENCE: {\n                const { page, perPage } = params.pagination;\n                const { field, order } = params.sort;\n                const { filter, target, id } = params;\n                const query = {\n                    page,\n                    page_size: perPage,\n                    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n                    ...filter,\n                    [target]: id\n                };\n                url = `${apiUrl}/${resource}/?${stringify(query)}`;\n                break;\n            }\n            case UPDATE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'PUT';\n                options.body = JSON.stringify(params.data);\n                break;\n            case DELETE:\n                url = `${apiUrl}/${resource}/${params.id}/`;\n                options.method = 'DELETE';\n                break;\n            default:\n                throw new Error(`Unsupported Data Provider request type ${type}`);\n        }\n\n        return { url, options };\n    }\n\n    /**\n     * @param {Object} response HTTP response from fetch()\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {String} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Object} Data response\n     */\n    const convertHttpResponse = (response, type, resource, params) => {\n        const { headers, json } = response;\n\n        switch (type) {\n            case GET_LIST:\n            case GET_MANY_REFERENCE:\n                if ('count' in json){\n                    return { data: json.results, total: json.count }\n                } else if (headers.has('content-range')) {\n                    return {\n                        data: json,\n                        total: parseInt(\n                            headers\n                            .get('content-range')\n                            .split('/')\n                            .pop(),\n                            10\n                        ),\n                    };\n                } else if ('detail' in json && json.detail === 'Invalid page.') {\n                    return { data: [], total: 0 }\n                } else {\n                    throw new Error(\n                        'The total number of results is unknown. The DRF data provider ' +\n                        'expects responses for lists of resources to contain this ' +\n                        'information to build the pagination. If you\\'re not using the ' +\n                        'default PageNumberPagination class, please include this ' +\n                        'information using the Content-Range header OR a \"count\" key ' +\n                        'inside the response.'\n                    );\n                }\n            case CREATE:\n                return { data: { ...params.data, id: json.id } };\n            case DELETE:\n                return { data: params.previousData };\n            default:\n                return { data: json };\n        }\n    }\n\n    /**\n     * @param {String} type React-admin request type, e.g. 'GET_LIST'\n     * @param {string} resource Name of the resource to fetch, e.g. 'posts'\n     * @param {Object} params Request parameters. Depends on the request type\n     * @returns {Promise} the Promise for a data response\n     */\n    return (type, resource, params) => {\n        /**\n         * Split GET_MANY, UPDATE_MANY and DELETE_MANY requests into multiple promises,\n         * since they're not supported by default.\n         */\n        switch (type) {\n            case GET_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}/`, {\n                            method: 'GET'\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            case UPDATE_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}`, {\n                            method: 'PUT',\n                            body: JSON.stringify(params.data),\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            case DELETE_MANY:\n                return Promise.all(\n                    params.ids.map(id =>\n                        httpClient(`${apiUrl}/${resource}/${id}`, {\n                            method: 'DELETE',\n                        })\n                    )\n                ).then(responses => ({\n                    data: responses.map(response => response.json),\n                }));\n            default:\n                break;\n        }\n\n        const { url, options } = convertDataRequestToHttp(type, resource, params);\n        return httpClient(url, options)\n            .then(response => convertHttpResponse(response, type, resource, params));\n    }\n}\n\nexport default drfProvider;\n"]},"metadata":{},"sourceType":"module"}