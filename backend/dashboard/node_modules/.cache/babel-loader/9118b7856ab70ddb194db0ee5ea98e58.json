{"ast":null,"code":"/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\n\nfunction updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: {\n        method: method,\n        args: args\n      }\n    };\n  };\n}\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\n\n\nexport var push = updateLocation('push');\nexport var replace = updateLocation('replace');\nexport var go = updateLocation('go');\nexport var goBack = updateLocation('goBack');\nexport var goForward = updateLocation('goForward');\nexport var routerActions = {\n  push: push,\n  replace: replace,\n  go: go,\n  goBack: goBack,\n  goForward: goForward\n};","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/react-router-redux/es/actions.js"],"names":["CALL_HISTORY_METHOD","updateLocation","method","_len","arguments","length","args","Array","_key","type","payload","push","replace","go","goBack","goForward","routerActions"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,mBAAmB,GAAG,8BAA1B;;AAEP,SAASC,cAAT,CAAwBC,MAAxB,EAAgC;AAC9B,SAAO,YAAY;AACjB,SAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,IAAI,GAAGC,KAAK,CAACJ,IAAD,CAAzC,EAAiDK,IAAI,GAAG,CAA7D,EAAgEA,IAAI,GAAGL,IAAvE,EAA6EK,IAAI,EAAjF,EAAqF;AACnFF,MAAAA,IAAI,CAACE,IAAD,CAAJ,GAAaJ,SAAS,CAACI,IAAD,CAAtB;AACD;;AAED,WAAO;AACLC,MAAAA,IAAI,EAAET,mBADD;AAELU,MAAAA,OAAO,EAAE;AAAER,QAAAA,MAAM,EAAEA,MAAV;AAAkBI,QAAAA,IAAI,EAAEA;AAAxB;AAFJ,KAAP;AAID,GATD;AAUD;AAED;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIK,IAAI,GAAGV,cAAc,CAAC,MAAD,CAAzB;AACP,OAAO,IAAIW,OAAO,GAAGX,cAAc,CAAC,SAAD,CAA5B;AACP,OAAO,IAAIY,EAAE,GAAGZ,cAAc,CAAC,IAAD,CAAvB;AACP,OAAO,IAAIa,MAAM,GAAGb,cAAc,CAAC,QAAD,CAA3B;AACP,OAAO,IAAIc,SAAS,GAAGd,cAAc,CAAC,WAAD,CAA9B;AAEP,OAAO,IAAIe,aAAa,GAAG;AAAEL,EAAAA,IAAI,EAAEA,IAAR;AAAcC,EAAAA,OAAO,EAAEA,OAAvB;AAAgCC,EAAAA,EAAE,EAAEA,EAApC;AAAwCC,EAAAA,MAAM,EAAEA,MAAhD;AAAwDC,EAAAA,SAAS,EAAEA;AAAnE,CAApB","sourcesContent":["\n/**\n * This action type will be dispatched by the history actions below.\n * If you're writing a middleware to watch for navigation events, be sure to\n * look for actions of this type.\n */\nexport var CALL_HISTORY_METHOD = '@@router/CALL_HISTORY_METHOD';\n\nfunction updateLocation(method) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return {\n      type: CALL_HISTORY_METHOD,\n      payload: { method: method, args: args }\n    };\n  };\n}\n\n/**\n * These actions correspond to the history API.\n * The associated routerMiddleware will capture these events before they get to\n * your reducer and reissue them as the matching function on your history.\n */\nexport var push = updateLocation('push');\nexport var replace = updateLocation('replace');\nexport var go = updateLocation('go');\nexport var goBack = updateLocation('goBack');\nexport var goForward = updateLocation('goForward');\n\nexport var routerActions = { push: push, replace: replace, go: go, goBack: goBack, goForward: goForward };"]},"metadata":{},"sourceType":"module"}