{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { crudGetManyReference as crudGetManyReferenceAction } from '../../actions';\nimport { SORT_ASC, SORT_DESC } from '../../reducer/admin/resource/list/queryReducer';\nimport { getIds, getReferences, getTotal, nameRelatedTo } from '../../reducer/admin/references/oneToMany';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\n\nvar UnconnectedReferenceManyFieldController =\n/** @class */\nfunction (_super) {\n  __extends(UnconnectedReferenceManyFieldController, _super);\n\n  function UnconnectedReferenceManyFieldController() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      sort: _this.props.sort,\n      page: 1,\n      perPage: _this.props.perPage\n    };\n\n    _this.setSort = function (field) {\n      var order = _this.state.sort.field === field && _this.state.sort.order === SORT_ASC ? SORT_DESC : SORT_ASC;\n\n      _this.setState({\n        sort: {\n          field: field,\n          order: order\n        }\n      }, _this.fetchReferences);\n    };\n\n    _this.setPage = function (page) {\n      return _this.setState({\n        page: page\n      }, _this.fetchReferences);\n    };\n\n    _this.setPerPage = function (perPage) {\n      return _this.setState({\n        perPage: perPage\n      }, _this.fetchReferences);\n    };\n\n    return _this;\n  }\n\n  UnconnectedReferenceManyFieldController.prototype.componentDidMount = function () {\n    this.fetchReferences();\n  };\n\n  UnconnectedReferenceManyFieldController.prototype.componentWillReceiveProps = function (nextProps) {\n    if (this.props.record.id !== nextProps.record.id || !isEqual(this.props.filter, nextProps.filter)) {\n      this.fetchReferences(nextProps);\n    }\n\n    if (!isEqual(this.props.sort, nextProps.sort)) {\n      this.setState({\n        sort: nextProps.sort\n      }, this.fetchReferences);\n    }\n  };\n\n  UnconnectedReferenceManyFieldController.prototype.fetchReferences = function (_a) {\n    var _b = _a === void 0 ? this.props : _a,\n        reference = _b.reference,\n        record = _b.record,\n        resource = _b.resource,\n        target = _b.target,\n        filter = _b.filter,\n        source = _b.source;\n\n    var crudGetManyReference = this.props.crudGetManyReference;\n    var _c = this.state,\n        page = _c.page,\n        perPage = _c.perPage,\n        sort = _c.sort;\n    var relatedTo = nameRelatedTo(reference, get(record, source), resource, target, filter);\n    crudGetManyReference(reference, target, get(record, source), relatedTo, {\n      page: page,\n      perPage: perPage\n    }, sort, filter, source);\n  };\n\n  UnconnectedReferenceManyFieldController.prototype.render = function () {\n    var _a = this.props,\n        resource = _a.resource,\n        reference = _a.reference,\n        data = _a.data,\n        ids = _a.ids,\n        children = _a.children,\n        basePath = _a.basePath,\n        total = _a.total;\n    var _b = this.state,\n        page = _b.page,\n        perPage = _b.perPage;\n    var referenceBasePath = basePath.replace(resource, reference);\n    return children({\n      currentSort: this.state.sort,\n      data: data,\n      ids: ids,\n      loadedOnce: typeof ids !== 'undefined',\n      page: page,\n      perPage: perPage,\n      referenceBasePath: referenceBasePath,\n      setPage: this.setPage,\n      setPerPage: this.setPerPage,\n      setSort: this.setSort,\n      total: total\n    });\n  };\n\n  UnconnectedReferenceManyFieldController.defaultProps = {\n    filter: {},\n    perPage: 25,\n    sort: {\n      field: 'id',\n      order: 'DESC'\n    },\n    source: 'id'\n  };\n  return UnconnectedReferenceManyFieldController;\n}(Component);\n\nexport { UnconnectedReferenceManyFieldController };\n\nfunction mapStateToProps(state, props) {\n  var relatedTo = nameRelatedTo(props.reference, get(props.record, props.source), props.resource, props.target, props.filter);\n  return {\n    data: getReferences(state, props.reference, relatedTo),\n    ids: getIds(state, relatedTo),\n    total: getTotal(state, relatedTo)\n  };\n}\n\nvar ReferenceManyFieldController = connect(mapStateToProps, {\n  crudGetManyReference: crudGetManyReferenceAction\n})(UnconnectedReferenceManyFieldController);\nexport default ReferenceManyFieldController;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-core/esm/controller/field/ReferenceManyFieldController.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","Component","connect","get","isEqual","crudGetManyReference","crudGetManyReferenceAction","SORT_ASC","SORT_DESC","getIds","getReferences","getTotal","nameRelatedTo","UnconnectedReferenceManyFieldController","_super","_this","apply","arguments","state","sort","props","page","perPage","setSort","field","order","setState","fetchReferences","setPage","setPerPage","componentDidMount","componentWillReceiveProps","nextProps","record","id","filter","_a","_b","reference","resource","target","source","_c","relatedTo","render","data","ids","children","basePath","total","referenceBasePath","replace","currentSort","loadedOnce","defaultProps","mapStateToProps","ReferenceManyFieldController"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport get from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport { crudGetManyReference as crudGetManyReferenceAction } from '../../actions';\nimport { SORT_ASC, SORT_DESC, } from '../../reducer/admin/resource/list/queryReducer';\nimport { getIds, getReferences, getTotal, nameRelatedTo, } from '../../reducer/admin/references/oneToMany';\n/**\n * Render related records to the current one.\n *\n * You must define the fields to be passed to the iterator component as children.\n *\n * @example Display all the comments of the current post as a datagrid\n * <ReferenceManyField reference=\"comments\" target=\"post_id\">\n *     <Datagrid>\n *         <TextField source=\"id\" />\n *         <TextField source=\"body\" />\n *         <DateField source=\"created_at\" />\n *         <EditButton />\n *     </Datagrid>\n * </ReferenceManyField>\n *\n * @example Display all the books by the current author, only the title\n * <ReferenceManyField reference=\"books\" target=\"author_id\">\n *     <SingleFieldList>\n *         <ChipField source=\"title\" />\n *     </SingleFieldList>\n * </ReferenceManyField>\n *\n * By default, restricts the possible values to 25. You can extend this limit\n * by setting the `perPage` prop.\n *\n * @example\n * <ReferenceManyField perPage={10} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * By default, orders the possible values by id desc. You can change this order\n * by setting the `sort` prop (an object with `field` and `order` properties).\n *\n * @example\n * <ReferenceManyField sort={{ field: 'created_at', order: 'DESC' }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n *\n * Also, you can filter the query used to populate the possible values. Use the\n * `filter` prop for that.\n *\n * @example\n * <ReferenceManyField filter={{ is_published: true }} reference=\"comments\" target=\"post_id\">\n *    ...\n * </ReferenceManyField>\n */\nvar UnconnectedReferenceManyFieldController = /** @class */ (function (_super) {\n    __extends(UnconnectedReferenceManyFieldController, _super);\n    function UnconnectedReferenceManyFieldController() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            sort: _this.props.sort,\n            page: 1,\n            perPage: _this.props.perPage,\n        };\n        _this.setSort = function (field) {\n            var order = _this.state.sort.field === field &&\n                _this.state.sort.order === SORT_ASC\n                ? SORT_DESC\n                : SORT_ASC;\n            _this.setState({ sort: { field: field, order: order } }, _this.fetchReferences);\n        };\n        _this.setPage = function (page) { return _this.setState({ page: page }, _this.fetchReferences); };\n        _this.setPerPage = function (perPage) {\n            return _this.setState({ perPage: perPage }, _this.fetchReferences);\n        };\n        return _this;\n    }\n    UnconnectedReferenceManyFieldController.prototype.componentDidMount = function () {\n        this.fetchReferences();\n    };\n    UnconnectedReferenceManyFieldController.prototype.componentWillReceiveProps = function (nextProps) {\n        if (this.props.record.id !== nextProps.record.id ||\n            !isEqual(this.props.filter, nextProps.filter)) {\n            this.fetchReferences(nextProps);\n        }\n        if (!isEqual(this.props.sort, nextProps.sort)) {\n            this.setState({ sort: nextProps.sort }, this.fetchReferences);\n        }\n    };\n    UnconnectedReferenceManyFieldController.prototype.fetchReferences = function (_a) {\n        var _b = _a === void 0 ? this.props : _a, reference = _b.reference, record = _b.record, resource = _b.resource, target = _b.target, filter = _b.filter, source = _b.source;\n        var crudGetManyReference = this.props.crudGetManyReference;\n        var _c = this.state, page = _c.page, perPage = _c.perPage, sort = _c.sort;\n        var relatedTo = nameRelatedTo(reference, get(record, source), resource, target, filter);\n        crudGetManyReference(reference, target, get(record, source), relatedTo, { page: page, perPage: perPage }, sort, filter, source);\n    };\n    UnconnectedReferenceManyFieldController.prototype.render = function () {\n        var _a = this.props, resource = _a.resource, reference = _a.reference, data = _a.data, ids = _a.ids, children = _a.children, basePath = _a.basePath, total = _a.total;\n        var _b = this.state, page = _b.page, perPage = _b.perPage;\n        var referenceBasePath = basePath.replace(resource, reference);\n        return children({\n            currentSort: this.state.sort,\n            data: data,\n            ids: ids,\n            loadedOnce: typeof ids !== 'undefined',\n            page: page,\n            perPage: perPage,\n            referenceBasePath: referenceBasePath,\n            setPage: this.setPage,\n            setPerPage: this.setPerPage,\n            setSort: this.setSort,\n            total: total,\n        });\n    };\n    UnconnectedReferenceManyFieldController.defaultProps = {\n        filter: {},\n        perPage: 25,\n        sort: { field: 'id', order: 'DESC' },\n        source: 'id',\n    };\n    return UnconnectedReferenceManyFieldController;\n}(Component));\nexport { UnconnectedReferenceManyFieldController };\nfunction mapStateToProps(state, props) {\n    var relatedTo = nameRelatedTo(props.reference, get(props.record, props.source), props.resource, props.target, props.filter);\n    return {\n        data: getReferences(state, props.reference, relatedTo),\n        ids: getIds(state, relatedTo),\n        total: getTotal(state, relatedTo),\n    };\n}\nvar ReferenceManyFieldController = connect(mapStateToProps, {\n    crudGetManyReference: crudGetManyReferenceAction,\n})(UnconnectedReferenceManyFieldController);\nexport default ReferenceManyFieldController;\n"]},"metadata":{},"sourceType":"module"}