{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' && Intl && typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\n\nexport var NumberField = function NumberField(_a) {\n  var className = _a.className,\n      record = _a.record,\n      source = _a.source,\n      locales = _a.locales,\n      options = _a.options,\n      textAlign = _a.textAlign,\n      rest = __rest(_a, [\"className\", \"record\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n\n  if (!record) {\n    return null;\n  }\n\n  var value = get(record, source);\n\n  if (value == null) {\n    return null;\n  }\n\n  if (!hasNumberFormat) {\n    return React.createElement(Typography, __assign({\n      component: \"span\",\n      variant: \"body1\",\n      className: className\n    }, sanitizeRestProps(rest)), value);\n  }\n\n  return React.createElement(Typography, __assign({\n    component: \"span\",\n    variant: \"body1\",\n    className: className\n  }, sanitizeRestProps(rest)), value.toLocaleString(locales, options));\n}; // wat? TypeScript looses the displayName if we don't set it explicitly\n\nNumberField.displayName = 'NumberField';\nvar EnhancedNumberField = pure(NumberField);\nEnhancedNumberField.defaultProps = {\n  addLabel: true,\n  textAlign: 'right'\n};\nEnhancedNumberField.propTypes = __assign({}, Typography.propTypes, fieldPropTypes, {\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  options: PropTypes.object\n});\nEnhancedNumberField.displayName = 'EnhancedNumberField';\nexport default EnhancedNumberField;","map":{"version":3,"sources":["/Users/masonkirby/Desktop/backed/backend/dashboard/node_modules/ra-data-drf/node_modules/ra-ui-materialui/esm/field/NumberField.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","React","PropTypes","get","pure","Typography","sanitizeRestProps","fieldPropTypes","hasNumberFormat","Intl","NumberFormat","NumberField","_a","className","record","source","locales","options","textAlign","rest","value","createElement","component","variant","toLocaleString","displayName","EnhancedNumberField","defaultProps","addLabel","propTypes","oneOfType","string","arrayOf","object"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport pure from 'recompose/pure';\nimport Typography from '@material-ui/core/Typography';\nimport sanitizeRestProps from './sanitizeRestProps';\nimport { fieldPropTypes } from './types';\nvar hasNumberFormat = !!(typeof Intl === 'object' &&\n    Intl &&\n    typeof Intl.NumberFormat === 'function');\n/**\n * Display a numeric value as a locale string.\n *\n * Uses Intl.NumberFormat() if available, passing the locales and options props as arguments.\n * If Intl is not available, it outputs number as is (and ignores the locales and options props).\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\n * @example\n * <NumberField source=\"score\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span>567</span>\n *\n * <NumberField source=\"score\" className=\"red\" />\n * // renders the record { id: 1234, score: 567 } as\n * <span class=\"red\">567</span>\n *\n * <NumberField source=\"share\" options={{ style: 'percent' }} />\n * // renders the record { id: 1234, share: 0.2545 } as\n * <span>25%</span>\n *\n * <NumberField source=\"price\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>$25.99</span>\n *\n * <NumberField source=\"price\" locales=\"fr-FR\" options={{ style: 'currency', currency: 'USD' }} />\n * // renders the record { id: 1234, price: 25.99 } as\n * <span>25,99 $US</span>\n */\nexport var NumberField = function (_a) {\n    var className = _a.className, record = _a.record, source = _a.source, locales = _a.locales, options = _a.options, textAlign = _a.textAlign, rest = __rest(_a, [\"className\", \"record\", \"source\", \"locales\", \"options\", \"textAlign\"]);\n    if (!record) {\n        return null;\n    }\n    var value = get(record, source);\n    if (value == null) {\n        return null;\n    }\n    if (!hasNumberFormat) {\n        return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body1\", className: className }, sanitizeRestProps(rest)), value));\n    }\n    return (React.createElement(Typography, __assign({ component: \"span\", variant: \"body1\", className: className }, sanitizeRestProps(rest)), value.toLocaleString(locales, options)));\n};\n// wat? TypeScript looses the displayName if we don't set it explicitly\nNumberField.displayName = 'NumberField';\nvar EnhancedNumberField = pure(NumberField);\nEnhancedNumberField.defaultProps = {\n    addLabel: true,\n    textAlign: 'right',\n};\nEnhancedNumberField.propTypes = __assign({}, Typography.propTypes, fieldPropTypes, { locales: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.arrayOf(PropTypes.string),\n    ]), options: PropTypes.object });\nEnhancedNumberField.displayName = 'EnhancedNumberField';\nexport default EnhancedNumberField;\n"]},"metadata":{},"sourceType":"module"}